/* The following code was generated by JFlex 1.4.1 on 2/29/08 3:48 PM */

/*
 * 01/24/2005
 *
 * HTMLTokenMaker.java - Generates tokens for HTML syntax highlighting.
 * Copyright (C) 2005 Robert Futrell
 * robert_futrell at users.sourceforge.net
 * http://fifesoft.com/rsyntaxtextarea
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA.
 */
package org.fife.ui.rsyntaxtextarea.modes;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * Scanner for HTML files.
 *
 * This implementation was created using
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1; however, the generated file
 * was modified for performance.  Memory allocation needs to be almost
 * completely removed to be competitive with the handwritten lexers (subclasses
 * of <code>AbstractTokenMaker</code>, so this class has been modified so that
 * Strings are never allocated (via yytext()), and the scanner never has to
 * worry about refilling its buffer (needlessly copying chars around).
 * We can achieve this because RText always scans exactly 1 line of tokens at a
 * time, and hands the scanner this line as an array of characters (a Segment
 * really).  Since tokens contain pointers to char arrays instead of Strings
 * holding their contents, there is no need for allocating new memory for
 * Strings.<p>
 *
 * The actual algorithm generated for scanning has, of course, not been
 * modified.<p>
 *
 * If you wish to regenerate this file yourself, keep in mind the following:
 * <ul>
 *   <li>The generated HTMLTokenMaker.java</code> file will contain two
 *       definitions of both <code>zzRefill</code> and <code>yyreset</code>.
 *       You should hand-delete the second of each definition (the ones
 *       generated by the lexer), as these generated methods modify the input
 *       buffer, which we'll never have to do.</li>
 *   <li>You should also change the declaration/definition of zzBuffer to NOT
 *       be initialized.  This is a needless memory allocation for us since we
 *       will be pointing the array somewhere else anyway.</li>
 *   <li>You should NOT call <code>yylex()</code> on the generated scanner
 *       directly; rather, you should use <code>getTokenList</code> as you would
 *       with any other <code>TokenMaker</code> instance.</li>
 * </ul>
 *
 * @author Robert Futrell
 * @version 0.4
 *
 */

public class HTMLTokenMaker extends AbstractJFlexTokenMaker implements TokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** lexical states */
  public static final int INTAG_SCRIPT = 5;
  public static final int JAVASCRIPT = 6;
  public static final int INTAG = 4;
  public static final int DTD = 3;
  public static final int YYINITIAL = 0;
  public static final int JS_MLC = 7;
  public static final int COMMENT = 1;
  public static final int PI = 2;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\2\1\0\1\1\1\34\22\0\1\4\1\52\1\11"+
    "\1\0\1\35\1\51\1\5\1\12\2\46\1\36\1\50\1\47\1\44"+
    "\1\45\1\13\1\24\3\33\3\77\1\26\2\23\1\54\1\7\1\3"+
    "\1\10\1\22\1\53\1\0\1\55\1\56\1\25\1\64\1\43\1\41"+
    "\1\70\1\76\1\72\1\100\1\73\1\40\1\63\1\61\1\60\1\66"+
    "\1\74\1\57\1\65\1\67\1\71\1\75\1\6\1\37\1\62\1\6"+
    "\1\46\1\27\1\46\1\51\1\35\1\0\1\102\1\32\1\15\1\105"+
    "\1\101\1\42\1\113\1\110\1\17\1\100\1\103\1\106\1\114\1\31"+
    "\1\104\1\20\1\74\1\16\1\14\1\21\1\30\1\112\1\107\1\115"+
    "\1\111\1\116\1\46\1\51\1\46\1\54\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\10\0\2\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\2\6\1\10\2\6\1\11\1\12\2\1\1\13\1\14"+
    "\1\15\2\16\1\1\2\16\1\1\1\17\1\16\1\1"+
    "\1\16\3\1\1\16\4\1\1\16\2\1\1\20\1\21"+
    "\1\22\2\13\2\1\1\13\1\23\1\24\1\13\6\1"+
    "\1\13\2\25\3\1\1\21\1\1\1\13\1\1\1\26"+
    "\1\13\11\1\1\6\1\27\1\6\1\0\1\30\1\31"+
    "\1\5\1\0\1\32\1\33\1\34\30\1\1\16\7\1"+
    "\1\16\5\1\1\16\22\1\2\0\1\21\1\23\3\15"+
    "\1\24\1\35\1\36\13\1\2\16\7\1\1\13\1\37"+
    "\1\25\1\40\1\37\1\40\1\37\1\41\1\37\25\1"+
    "\1\16\5\1\1\42\2\0\1\43\12\1\1\16\44\1"+
    "\1\0\1\21\3\23\1\24\2\15\1\24\1\0\16\1"+
    "\1\5\13\1\1\40\1\0\2\41\33\1\1\0\1\44"+
    "\17\1\1\16\12\1\1\0\1\21\1\14\1\23\1\33"+
    "\1\23\1\24\1\45\5\1\1\5\13\1\1\46\12\1"+
    "\1\47\7\1\1\0\10\1\1\16\5\1\1\0\1\21"+
    "\1\23\1\24\14\1\1\16\2\1\1\16\7\1\1\0"+
    "\7\1\1\0\1\21\1\23\1\24\17\1\1\50\2\1"+
    "\1\0\7\1\1\0\3\1\1\51\1\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[497];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\117\0\236\0\355\0\u013c\0\u018b\0\u01da\0\u0229"+
    "\0\u0278\0\u02c7\0\u0316\0\u0365\0\u03b4\0\u0403\0\u0452\0\u0316"+
    "\0\u04a1\0\u04f0\0\u0316\0\u053f\0\u058e\0\u0316\0\u0316\0\u05dd"+
    "\0\u062c\0\u0316\0\u067b\0\u06ca\0\u0316\0\u0719\0\u0768\0\u07b7"+
    "\0\u0806\0\u0855\0\u0316\0\u08a4\0\u08f3\0\u0942\0\u0991\0\u09e0"+
    "\0\u0a2f\0\u0a7e\0\u0acd\0\u0b1c\0\u0b6b\0\u0bba\0\u05dd\0\u0c09"+
    "\0\u0c58\0\u0316\0\u0ca7\0\u0316\0\u0cf6\0\u0d45\0\u0d94\0\u0316"+
    "\0\u0de3\0\u0e32\0\u0e81\0\u0ed0\0\u0f1f\0\u0f6e\0\u0fbd\0\u100c"+
    "\0\u105b\0\u10aa\0\u10f9\0\u1148\0\u1197\0\u11e6\0\u1235\0\u1284"+
    "\0\u0316\0\u12d3\0\u1322\0\u1371\0\u0316\0\u13c0\0\u140f\0\u145e"+
    "\0\u14ad\0\u14fc\0\u154b\0\u159a\0\u15e9\0\u1638\0\u1687\0\u16d6"+
    "\0\u0316\0\u1725\0\u1774\0\u17c3\0\u0316\0\u0316\0\u1812\0\u0316"+
    "\0\u0316\0\u0316\0\u1861\0\u18b0\0\u18ff\0\u194e\0\u199d\0\u19ec"+
    "\0\u1a3b\0\u1a8a\0\u1ad9\0\u1b28\0\u1b77\0\u1bc6\0\u1c15\0\u1c64"+
    "\0\u1cb3\0\u1d02\0\u1d51\0\u1da0\0\u1def\0\u1e3e\0\u1e8d\0\u1edc"+
    "\0\u1f2b\0\u1f7a\0\u1fc9\0\u2018\0\u2067\0\u20b6\0\u2105\0\u2154"+
    "\0\u21a3\0\u21f2\0\u2241\0\u2290\0\u22df\0\u232e\0\u237d\0\u23cc"+
    "\0\u241b\0\u246a\0\u24b9\0\u2508\0\u2557\0\u25a6\0\u25f5\0\u2644"+
    "\0\u2693\0\u26e2\0\u2731\0\u2780\0\u27cf\0\u08a4\0\u281e\0\u286d"+
    "\0\u28bc\0\u290b\0\u295a\0\u0de3\0\u29a9\0\u29f8\0\u2a47\0\u2a96"+
    "\0\u2ae5\0\u0316\0\u2b34\0\u2b83\0\u2bd2\0\u2c21\0\u2c70\0\u2cbf"+
    "\0\u2d0e\0\u2d5d\0\u2dac\0\u2dfb\0\u2e4a\0\u2e99\0\u2ee8\0\u2f37"+
    "\0\u2f86\0\u0d94\0\u2fd5\0\u3024\0\u3073\0\u30c2\0\u3111\0\u3160"+
    "\0\u31af\0\u31fe\0\u324d\0\u324d\0\u324d\0\u329c\0\u32eb\0\u333a"+
    "\0\u3389\0\u33d8\0\u3427\0\u3476\0\u34c5\0\u3514\0\u3563\0\u35b2"+
    "\0\u3601\0\u3650\0\u369f\0\u36ee\0\u373d\0\u378c\0\u37db\0\u382a"+
    "\0\u3879\0\u38c8\0\u3917\0\u3966\0\u39b5\0\u3a04\0\u3a53\0\u3aa2"+
    "\0\u3af1\0\u3b40\0\u3b8f\0\u3bde\0\u3c2d\0\u0316\0\u3c7c\0\u3ccb"+
    "\0\u0316\0\u3d1a\0\u3d69\0\u3db8\0\u3e07\0\u3e56\0\u3ea5\0\u3ef4"+
    "\0\u3f43\0\u3f92\0\u3fe1\0\u4030\0\u407f\0\u40ce\0\u411d\0\u416c"+
    "\0\u41bb\0\u420a\0\u4259\0\u42a8\0\u42f7\0\u4346\0\u4395\0\u43e4"+
    "\0\u4433\0\u2241\0\u4482\0\u44d1\0\u4520\0\u456f\0\u45be\0\u460d"+
    "\0\u465c\0\u46ab\0\u46fa\0\u4749\0\u4798\0\u47e7\0\u4836\0\u4885"+
    "\0\u48d4\0\u4923\0\u4972\0\u49c1\0\u4a10\0\u4a5f\0\u4aae\0\u4afd"+
    "\0\u4b4c\0\u4b9b\0\u4bea\0\u4c39\0\u4c88\0\u4cd7\0\u4d26\0\u4d75"+
    "\0\u4dc4\0\u4e13\0\u4e62\0\u4eb1\0\u4f00\0\u4f4f\0\u4f9e\0\u4fed"+
    "\0\u503c\0\u508b\0\u50da\0\u5129\0\u5178\0\u51c7\0\u5216\0\u5265"+
    "\0\u52b4\0\u5303\0\u5352\0\u53a1\0\u53f0\0\u543f\0\u548e\0\u54dd"+
    "\0\u552c\0\u557b\0\u55ca\0\u5619\0\u5668\0\u56b7\0\u324d\0\u5706"+
    "\0\u5755\0\u57a4\0\u57f3\0\u5842\0\u5891\0\u58e0\0\u592f\0\u597e"+
    "\0\u59cd\0\u5a1c\0\u5a6b\0\u5aba\0\u5b09\0\u5b58\0\u5ba7\0\u5bf6"+
    "\0\u5c45\0\u5c94\0\u5ce3\0\u5d32\0\u5d81\0\u5dd0\0\u5e1f\0\u5e6e"+
    "\0\u5ebd\0\u5f0c\0\u5f5b\0\u5faa\0\u0316\0\u5ff9\0\u6048\0\u6097"+
    "\0\u60e6\0\u6135\0\u6184\0\u61d3\0\u6222\0\u6271\0\u62c0\0\u630f"+
    "\0\u635e\0\u241b\0\u63ad\0\u63fc\0\u644b\0\u649a\0\u64e9\0\u6538"+
    "\0\u6587\0\u65d6\0\u6625\0\u6674\0\u66c3\0\u6712\0\u6761\0\u67b0"+
    "\0\u67ff\0\u0316\0\u684e\0\u4bea\0\u689d\0\u68ec\0\u0316\0\u693b"+
    "\0\u698a\0\u69d9\0\u6a28\0\u6a77\0\u0d94\0\u6ac6\0\u6b15\0\u6b64"+
    "\0\u6bb3\0\u6c02\0\u6c51\0\u6ca0\0\u6cef\0\u6d3e\0\u6d8d\0\u6ddc"+
    "\0\u0d94\0\u6e2b\0\u6e7a\0\u6ec9\0\u6f18\0\u6f67\0\u6fb6\0\u7005"+
    "\0\u7054\0\u70a3\0\u70f2\0\u0d94\0\u7141\0\u7190\0\u71df\0\u722e"+
    "\0\u727d\0\u72cc\0\u731b\0\u736a\0\u73b9\0\u7408\0\u7457\0\u74a6"+
    "\0\u74f5\0\u7544\0\u7593\0\u75e2\0\u7631\0\u7631\0\u7680\0\u76cf"+
    "\0\u771e\0\u776d\0\u77bc\0\u780b\0\u785a\0\u78a9\0\u78f8\0\u7947"+
    "\0\u7996\0\u79e5\0\u7a34\0\u7a83\0\u7ad2\0\u7b21\0\u7b70\0\u7bbf"+
    "\0\u7c0e\0\u7c5d\0\u55ca\0\u7cac\0\u7cfb\0\u7d4a\0\u7d99\0\u7de8"+
    "\0\u7e37\0\u7e86\0\u7ed5\0\u7f24\0\u7f73\0\u7fc2\0\u8011\0\u8060"+
    "\0\u80af\0\u80fe\0\u814d\0\u819c\0\u81eb\0\u823a\0\u8289\0\u82d8"+
    "\0\u8327\0\u8376\0\u83c5\0\u8414\0\u8463\0\u84b2\0\u8501\0\u8550"+
    "\0\u859f\0\u85ee\0\u863d\0\u868c\0\u86db\0\u872a\0\u8779\0\u87c8"+
    "\0\u0316\0\u8817\0\u8866\0\u88b5\0\u8904\0\u8953\0\u89a2\0\u89f1"+
    "\0\u8a40\0\u8a8f\0\u8ade\0\u8b2d\0\u8b7c\0\u8bcb\0\u8c1a\0\u0316"+
    "\0\u8c69";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[497];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\11\1\12\1\13\1\14\1\15\1\16\111\11\2\17"+
    "\1\20\41\17\1\21\52\17\2\22\1\23\50\22\1\24"+
    "\43\22\2\25\1\26\17\25\1\27\74\25\1\30\1\31"+
    "\1\0\1\30\1\15\3\30\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\30\1\40\1\41\1\42\1\43\2\30"+
    "\1\37\2\30\1\44\1\45\1\46\5\30\1\47\2\50"+
    "\1\51\11\30\1\52\1\46\1\30\1\53\1\45\1\30"+
    "\1\54\1\55\1\36\1\41\1\42\1\30\1\44\1\40"+
    "\1\56\1\57\1\60\1\61\2\30\1\51\1\52\1\56"+
    "\1\53\1\55\1\47\1\30\1\61\1\30\1\60\1\30"+
    "\1\54\3\30\1\31\1\0\1\30\1\15\3\30\1\32"+
    "\1\33\1\34\1\35\6\30\1\62\74\30\1\63\1\15"+
    "\1\64\1\65\1\15\1\66\1\67\1\70\1\71\1\72"+
    "\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102"+
    "\1\103\1\104\1\105\1\67\1\104\1\63\1\106\1\107"+
    "\1\110\1\104\1\111\1\67\1\71\3\67\1\112\1\67"+
    "\1\113\1\114\1\115\1\70\1\116\2\71\2\32\4\67"+
    "\1\117\10\67\1\120\4\67\1\104\1\67\1\121\1\122"+
    "\2\67\1\123\1\124\1\125\2\67\1\126\1\127\3\67"+
    "\2\130\1\131\33\130\1\132\60\130\2\11\4\0\112\11"+
    "\1\12\2\0\1\15\1\0\111\11\133\0\1\133\35\0"+
    "\1\134\1\135\44\0\1\15\2\0\1\15\120\0\1\16"+
    "\1\136\4\0\6\16\3\0\1\16\2\0\3\16\4\0"+
    "\5\16\11\0\22\16\1\0\17\16\2\17\1\0\41\17"+
    "\1\0\52\17\44\0\1\137\52\0\2\22\1\0\50\22"+
    "\1\0\43\22\22\0\1\140\74\0\2\25\1\0\17\25"+
    "\1\0\74\25\2\30\1\0\1\30\1\0\3\30\4\0"+
    "\6\30\1\0\75\30\1\31\1\0\1\30\1\15\3\30"+
    "\4\0\6\30\1\0\74\30\11\33\1\141\105\33\12\34"+
    "\1\142\104\34\2\30\1\0\1\30\1\0\3\30\4\0"+
    "\1\30\1\143\2\30\1\144\1\145\1\0\2\30\1\143"+
    "\2\30\1\146\12\30\1\147\11\30\1\150\5\30\1\151"+
    "\2\30\1\144\1\145\1\30\1\146\7\30\1\147\1\150"+
    "\11\30\1\151\4\30\1\0\1\30\1\0\3\30\4\0"+
    "\3\30\1\152\2\30\1\0\20\30\1\153\11\30\1\154"+
    "\2\30\1\155\11\30\1\152\6\30\1\153\1\154\1\30"+
    "\1\155\14\30\1\0\1\30\1\0\3\30\4\0\1\156"+
    "\5\30\1\0\6\30\1\157\6\30\1\160\2\161\16\30"+
    "\1\157\1\30\1\162\1\30\1\156\20\30\1\160\5\30"+
    "\1\162\4\30\1\0\1\30\1\0\3\30\4\0\2\30"+
    "\1\163\3\30\1\0\15\30\1\164\14\30\1\165\1\30"+
    "\1\163\22\30\1\165\3\30\1\164\12\30\1\0\1\30"+
    "\1\0\3\30\4\0\2\30\1\57\1\166\1\30\1\57"+
    "\1\0\7\30\1\167\6\30\2\170\1\171\11\30\1\172"+
    "\1\167\1\57\4\30\1\57\2\30\1\57\2\30\1\166"+
    "\3\30\1\173\2\30\1\171\1\172\2\30\1\57\2\30"+
    "\1\173\10\30\1\0\1\30\1\0\3\30\4\0\6\30"+
    "\1\0\15\30\1\57\45\30\1\57\12\30\1\0\1\30"+
    "\1\0\3\30\4\0\6\30\1\0\35\30\1\174\23\30"+
    "\1\174\14\30\1\0\1\30\1\0\3\30\4\0\2\30"+
    "\1\57\1\162\2\30\1\0\5\30\1\175\7\30\1\176"+
    "\14\30\1\177\1\30\1\57\1\200\3\30\1\201\3\30"+
    "\1\202\1\175\1\162\7\30\1\177\1\30\1\200\1\201"+
    "\1\176\4\30\1\202\5\30\1\0\1\30\1\0\3\30"+
    "\4\0\3\30\1\203\2\30\1\0\20\30\1\204\11\30"+
    "\1\205\14\30\1\203\6\30\1\204\1\205\16\30\1\0"+
    "\1\30\1\0\3\30\4\0\2\30\1\206\1\207\2\30"+
    "\1\0\34\30\1\206\1\210\11\30\1\207\11\30\1\210"+
    "\14\30\1\0\1\30\1\0\3\30\4\0\6\30\1\0"+
    "\40\30\1\211\30\30\1\211\4\30\1\0\1\30\1\0"+
    "\3\30\4\0\1\30\1\212\1\213\1\30\1\214\1\30"+
    "\1\0\2\30\1\212\4\30\1\215\23\30\1\215\1\213"+
    "\4\30\1\216\1\30\1\214\16\30\1\216\13\30\1\0"+
    "\1\30\1\0\3\30\4\0\4\30\1\217\1\30\1\0"+
    "\7\30\1\220\5\30\1\57\15\30\1\220\7\30\1\217"+
    "\17\30\1\57\12\30\1\0\1\30\1\0\3\30\4\0"+
    "\6\30\1\0\5\30\1\221\12\30\1\222\11\30\1\223"+
    "\13\30\1\221\7\30\1\222\1\223\16\30\1\0\1\30"+
    "\1\0\3\30\4\0\3\30\1\224\1\30\1\57\1\0"+
    "\15\30\1\57\2\225\1\226\20\30\1\57\2\30\1\57"+
    "\2\30\1\224\6\30\1\226\3\30\2\57\12\30\1\0"+
    "\1\30\1\0\3\30\4\0\6\30\1\0\7\30\1\227"+
    "\10\30\1\230\12\30\1\227\22\30\1\230\17\30\1\0"+
    "\1\30\1\0\3\30\4\0\6\30\1\0\32\30\1\231"+
    "\24\30\1\231\16\30\1\0\1\30\1\0\3\30\4\0"+
    "\2\30\1\57\2\30\1\232\1\0\10\30\1\57\7\30"+
    "\1\233\13\30\1\57\7\30\1\232\7\30\1\57\1\30"+
    "\1\233\15\30\1\63\5\0\1\63\5\0\6\63\1\0"+
    "\11\63\1\0\1\63\1\0\5\63\11\0\42\63\3\0"+
    "\1\234\4\0\1\32\2\0\1\235\110\0\1\32\2\0"+
    "\1\32\106\0\1\63\5\0\1\67\5\0\6\67\1\0"+
    "\4\67\1\236\4\67\1\0\1\67\1\0\5\67\11\0"+
    "\42\67\10\0\1\32\106\0\2\72\1\0\6\72\1\141"+
    "\15\72\1\237\67\72\2\240\1\241\7\240\1\242\14\240"+
    "\1\243\67\240\10\0\1\32\2\0\1\244\22\0\1\245"+
    "\60\0\1\63\5\0\1\67\5\0\5\67\1\246\1\0"+
    "\4\67\1\236\1\247\3\67\1\0\1\67\1\0\5\67"+
    "\11\0\32\67\1\250\1\251\1\252\5\67\1\63\5\0"+
    "\1\67\5\0\6\67\1\0\4\67\1\236\4\67\1\0"+
    "\1\67\1\0\5\67\11\0\25\67\1\253\1\67\1\254"+
    "\1\67\1\255\1\67\1\256\6\67\1\63\5\0\1\67"+
    "\5\0\6\67\1\0\4\67\1\236\4\67\1\0\1\67"+
    "\1\0\5\67\11\0\24\67\1\257\15\67\1\63\5\0"+
    "\1\67\5\0\1\260\5\67\1\0\4\67\1\236\1\67"+
    "\1\261\2\67\1\0\1\67\1\0\3\67\1\262\1\67"+
    "\11\0\37\67\1\263\2\67\1\63\5\0\1\67\5\0"+
    "\2\67\1\264\3\67\1\0\4\67\1\236\1\265\3\67"+
    "\1\0\1\67\1\0\5\67\11\0\25\67\1\266\14\67"+
    "\1\63\5\0\1\67\5\0\2\67\1\267\3\67\1\0"+
    "\4\67\1\236\4\67\1\0\1\67\1\0\5\67\11\0"+
    "\33\67\1\270\1\271\5\67\10\0\1\32\11\0\1\272"+
    "\74\0\1\273\5\0\1\273\5\0\6\273\1\0\2\104"+
    "\1\273\1\104\4\273\1\104\1\0\1\273\1\0\1\273"+
    "\1\274\2\275\1\276\1\0\1\277\7\0\7\273\1\275"+
    "\12\273\1\104\1\273\1\276\3\273\1\275\1\274\11\273"+
    "\5\0\1\273\5\0\6\273\1\0\1\300\1\301\1\273"+
    "\1\301\4\273\1\301\1\0\1\273\1\0\1\302\1\274"+
    "\2\275\1\276\1\0\1\277\7\0\7\273\1\275\12\273"+
    "\1\301\1\273\1\276\3\273\1\275\1\274\6\273\1\302"+
    "\1\273\1\63\5\0\1\67\5\0\6\67\1\0\4\67"+
    "\1\236\1\67\1\303\2\67\1\0\1\67\1\0\5\67"+
    "\11\0\42\67\1\63\5\0\1\67\5\0\6\67\1\0"+
    "\4\67\1\236\1\304\3\67\1\0\1\67\1\0\5\67"+
    "\11\0\24\67\1\305\1\306\14\67\1\63\5\0\1\67"+
    "\5\0\2\67\1\307\3\67\1\0\4\67\1\236\4\67"+
    "\1\0\1\67\1\0\5\67\11\0\27\67\1\310\4\67"+
    "\1\311\5\67\1\63\5\0\1\67\5\0\3\67\1\312"+
    "\2\67\1\0\4\67\1\236\1\313\3\67\1\0\1\67"+
    "\1\0\5\67\11\0\25\67\1\314\1\67\1\315\1\67"+
    "\1\316\10\67\10\0\1\32\33\0\1\32\75\0\2\277"+
    "\1\0\1\277\4\0\1\277\43\0\1\277\27\0\1\32"+
    "\37\0\1\32\46\0\1\63\5\0\1\67\5\0\6\67"+
    "\1\0\4\67\1\236\4\67\1\0\1\67\1\0\5\67"+
    "\11\0\25\67\1\317\14\67\1\63\5\0\1\67\5\0"+
    "\6\67\1\0\4\67\1\236\1\67\1\320\2\67\1\0"+
    "\1\67\1\0\5\67\11\0\42\67\1\63\5\0\1\67"+
    "\5\0\1\321\5\67\1\0\4\67\1\236\1\67\1\322"+
    "\2\67\1\0\1\67\1\0\5\67\11\0\31\67\1\323"+
    "\3\67\1\324\2\67\1\325\1\67\1\63\5\0\1\67"+
    "\5\0\6\67\1\0\4\67\1\236\2\67\1\326\1\67"+
    "\1\0\1\67\1\0\5\67\11\0\42\67\1\63\5\0"+
    "\1\67\5\0\6\67\1\0\4\67\1\236\4\67\1\0"+
    "\1\67\1\0\5\67\11\0\24\67\1\327\2\67\1\330"+
    "\12\67\1\63\5\0\1\67\5\0\6\67\1\0\4\67"+
    "\1\236\4\67\1\0\1\67\1\0\5\67\11\0\27\67"+
    "\1\331\12\67\1\63\5\0\1\67\5\0\3\67\1\332"+
    "\2\67\1\0\4\67\1\236\4\67\1\0\1\67\1\0"+
    "\5\67\11\0\33\67\1\333\6\67\1\63\5\0\1\67"+
    "\5\0\6\67\1\0\4\67\1\236\4\67\1\0\1\67"+
    "\1\0\5\67\11\0\25\67\1\315\1\67\1\334\12\67"+
    "\1\63\5\0\1\67\5\0\6\67\1\0\4\67\1\236"+
    "\4\67\1\0\1\67\1\0\5\67\11\0\27\67\1\335"+
    "\12\67\2\130\1\0\33\130\1\0\60\130\13\0\1\336"+
    "\120\0\1\337\145\0\1\340\74\0\1\341\74\0\2\30"+
    "\1\0\1\30\1\0\3\30\4\0\2\30\1\342\3\30"+
    "\1\0\34\30\1\342\41\30\1\0\1\30\1\0\3\30"+
    "\4\0\6\30\1\0\32\30\1\343\24\30\1\343\16\30"+
    "\1\0\1\30\1\0\3\30\4\0\2\30\1\344\3\30"+
    "\1\0\34\30\1\344\2\30\1\345\26\30\1\345\7\30"+
    "\1\0\1\30\1\0\3\30\4\0\4\30\1\57\1\30"+
    "\1\0\7\30\1\57\23\30\1\57\7\30\1\57\32\30"+
    "\1\0\1\30\1\0\3\30\4\0\2\30\1\346\3\30"+
    "\1\0\15\30\1\347\16\30\1\346\26\30\1\347\12\30"+
    "\1\0\1\30\1\0\3\30\4\0\6\30\1\0\40\30"+
    "\1\350\30\30\1\350\4\30\1\0\1\30\1\0\3\30"+
    "\4\0\6\30\1\0\32\30\1\351\24\30\1\351\16\30"+
    "\1\0\1\30\1\0\3\30\4\0\5\30\1\163\1\0"+
    "\44\30\1\163\31\30\1\0\1\30\1\0\3\30\4\0"+
    "\6\30\1\0\6\30\1\352\27\30\1\352\37\30\1\0"+
    "\1\30\1\0\3\30\4\0\4\30\1\353\1\30\1\0"+
    "\43\30\1\353\32\30\1\0\1\30\1\0\3\30\4\0"+
    "\6\30\1\0\15\30\1\354\22\30\1\355\1\163\20\30"+
    "\1\163\1\354\5\30\1\355\4\30\1\0\1\30\1\0"+
    "\3\30\4\0\3\30\1\356\2\30\1\0\47\30\1\356"+
    "\26\30\1\0\1\30\1\0\3\30\4\0\1\57\3\30"+
    "\1\357\1\30\1\0\42\30\1\57\1\357\32\30\1\0"+
    "\1\30\1\0\3\30\4\0\6\30\1\0\32\30\1\360"+
    "\24\30\1\360\16\30\1\0\1\30\1\0\3\30\4\0"+
    "\2\30\1\361\3\30\1\0\34\30\1\361\41\30\1\0"+
    "\1\30\1\0\3\30\4\0\6\30\1\0\45\30\1\57"+
    "\22\30\1\57\5\30\1\0\1\30\1\0\3\30\4\0"+
    "\6\30\1\0\20\30\1\57\35\30\1\57\17\30\1\0"+
    "\1\30\1\0\3\30\4\0\6\30\1\0\32\30\1\362"+
    "\24\30\1\362\16\30\1\0\1\30\1\0\3\30\4\0"+
    "\2\30\1\363\3\30\1\0\34\30\1\363\41\30\1\0"+
    "\1\30\1\0\3\30\4\0\5\30\1\345\1\0\44\30"+
    "\1\345\31\30\1\0\1\30\1\0\3\30\4\0\6\30"+
    "\1\0\35\30\1\200\23\30\1\200\14\30\1\0\1\30"+
    "\1\0\3\30\4\0\6\30\1\0\35\30\1\364\23\30"+
    "\1\364\14\30\1\0\1\30\1\0\3\30\4\0\6\30"+
    "\1\0\14\30\1\365\55\30\1\365\3\30\1\0\1\30"+
    "\1\0\3\30\4\0\6\30\1\0\7\30\1\345\23\30"+
    "\1\345\42\30\1\0\1\30\1\0\3\30\4\0\6\30"+
    "\1\0\20\30\1\233\35\30\1\233\17\30\1\0\1\30"+
    "\1\0\3\30\4\0\1\366\5\30\1\0\7\30\1\231"+
    "\5\30\1\160\2\367\1\370\12\30\1\231\6\30\1\366"+
    "\13\30\1\370\4\30\1\160\12\30\1\0\1\30\1\0"+
    "\3\30\4\0\5\30\1\371\1\0\44\30\1\371\31\30"+
    "\1\0\1\30\1\0\3\30\4\0\3\30\1\372\2\30"+
    "\1\0\35\30\1\373\11\30\1\372\11\30\1\373\14\30"+
    "\1\0\1\30\1\0\3\30\4\0\1\374\5\30\1\0"+
    "\42\30\1\374\33\30\1\0\1\30\1\0\3\30\4\0"+
    "\6\30\1\0\41\30\1\375\20\30\1\375\13\30\1\0"+
    "\1\30\1\0\3\30\4\0\6\30\1\0\35\30\1\57"+
    "\23\30\1\57\14\30\1\0\1\30\1\0\3\30\4\0"+
    "\1\376\5\30\1\0\42\30\1\376\33\30\1\0\1\30"+
    "\1\0\3\30\4\0\6\30\1\0\6\30\1\377\27\30"+
    "\1\377\37\30\1\0\1\30\1\0\3\30\4\0\6\30"+
    "\1\0\45\30\1\u0100\22\30\1\u0100\5\30\1\0\1\30"+
    "\1\0\3\30\4\0\6\30\1\0\7\30\1\u0101\23\30"+
    "\1\u0101\3\30\1\u0102\26\30\1\u0102\7\30\1\0\1\30"+
    "\1\0\3\30\4\0\6\30\1\0\32\30\1\u0103\24\30"+
    "\1\u0103\16\30\1\0\1\30\1\0\3\30\4\0\6\30"+
    "\1\0\20\30\1\u0104\35\30\1\u0104\17\30\1\0\1\30"+
    "\1\0\3\30\4\0\2\30\1\u0105\3\30\1\0\6\30"+
    "\1\u0106\25\30\1\u0105\1\30\1\u0106\37\30\1\0\1\30"+
    "\1\0\3\30\4\0\6\30\1\0\7\30\1\u0107\23\30"+
    "\1\u0107\42\30\1\0\1\30\1\0\3\30\4\0\2\30"+
    "\1\u0108\3\30\1\0\34\30\1\u0108\41\30\1\0\1\30"+
    "\1\0\3\30\4\0\6\30\1\0\20\30\1\u0109\35\30"+
    "\1\u0109\17\30\1\0\1\30\1\0\3\30\4\0\4\30"+
    "\1\u010a\1\30\1\0\43\30\1\u010a\32\30\1\0\1\30"+
    "\1\0\3\30\4\0\6\30\1\0\7\30\1\231\23\30"+
    "\1\231\42\30\1\0\1\30\1\0\3\30\4\0\6\30"+
    "\1\0\41\30\1\u010b\20\30\1\u010b\13\30\1\0\1\30"+
    "\1\0\3\30\4\0\5\30\1\u010c\1\0\44\30\1\u010c"+
    "\31\30\1\0\1\30\1\0\3\30\4\0\6\30\1\0"+
    "\55\30\1\347\20\30\1\0\1\30\1\0\3\30\4\0"+
    "\6\30\1\0\15\30\1\u010d\45\30\1\u010d\12\30\1\0"+
    "\1\30\1\0\3\30\4\0\5\30\1\u0109\1\0\6\30"+
    "\1\u010e\27\30\1\u010e\5\30\1\u0109\31\30\1\0\1\30"+
    "\1\0\3\30\4\0\2\30\1\u010f\1\30\1\57\1\30"+
    "\1\0\34\30\1\u010f\6\30\1\57\32\30\1\0\1\30"+
    "\1\0\3\30\4\0\2\30\1\57\3\30\1\0\34\30"+
    "\1\57\15\30\1\57\14\30\1\57\6\30\1\0\1\30"+
    "\1\0\3\30\4\0\6\30\1\0\6\30\1\57\27\30"+
    "\1\57\37\30\1\0\1\30\1\0\3\30\4\0\6\30"+
    "\1\0\41\30\1\57\20\30\1\57\13\30\1\0\1\30"+
    "\1\0\3\30\4\0\6\30\1\0\37\30\1\u0110\26\30"+
    "\1\u0110\7\30\1\0\1\30\1\0\3\30\4\0\2\30"+
    "\1\57\3\30\1\0\34\30\1\57\41\30\1\0\1\30"+
    "\1\0\3\30\4\0\6\30\1\0\40\30\1\226\30\30"+
    "\1\226\4\30\1\0\1\30\1\0\3\30\4\0\6\30"+
    "\1\0\32\30\1\227\24\30\1\227\14\30\14\0\1\u0111"+
    "\102\0\1\63\5\0\1\63\5\0\6\63\1\0\5\63"+
    "\1\u0112\3\63\1\0\1\63\1\0\5\63\11\0\42\63"+
    "\2\u0113\1\0\6\u0113\2\72\3\u0113\1\72\2\u0113\1\72"+
    "\2\u0113\1\72\1\u0113\1\72\1\u0114\1\u0115\3\72\6\u0113"+
    "\1\72\34\u0113\1\72\17\u0113\2\u0116\1\0\7\u0116\1\142"+
    "\104\u0116\12\0\1\142\104\0\2\u0116\1\0\6\u0116\1\240"+
    "\1\241\3\u0116\1\240\2\u0116\1\240\2\u0116\1\u0117\1\u0116"+
    "\1\u0118\1\240\1\u0119\2\240\1\u0117\6\u0116\1\240\34\u0116"+
    "\1\u0118\17\u0116\2\244\1\0\114\244\36\0\1\u011a\60\0"+
    "\1\63\5\0\1\67\5\0\6\67\1\0\4\67\1\236"+
    "\4\67\1\0\1\67\1\0\5\67\11\0\25\67\1\u011b"+
    "\14\67\1\63\5\0\1\67\5\0\4\67\1\u011c\1\67"+
    "\1\0\4\67\1\236\4\67\1\0\1\67\1\0\5\67"+
    "\11\0\42\67\1\63\5\0\1\67\5\0\3\67\1\u011d"+
    "\2\67\1\0\4\67\1\236\4\67\1\0\1\67\1\0"+
    "\5\67\11\0\42\67\1\63\5\0\1\67\5\0\6\67"+
    "\1\0\4\67\1\236\4\67\1\0\1\67\1\0\5\67"+
    "\11\0\27\67\1\u011e\12\67\1\63\5\0\1\67\5\0"+
    "\6\67\1\0\4\67\1\236\1\67\1\u011f\2\67\1\0"+
    "\1\67\1\0\5\67\11\0\42\67\1\63\5\0\1\67"+
    "\5\0\1\u0120\4\67\1\u0121\1\0\4\67\1\236\4\67"+
    "\1\0\1\67\1\0\5\67\11\0\42\67\1\63\5\0"+
    "\1\67\5\0\6\67\1\0\4\67\1\236\1\67\1\u0122"+
    "\2\67\1\0\1\67\1\0\5\67\11\0\42\67\1\63"+
    "\5\0\1\67\5\0\6\67\1\0\4\67\1\236\4\67"+
    "\1\0\1\67\1\0\5\67\11\0\25\67\1\u0123\14\67"+
    "\1\63\5\0\1\67\5\0\6\67\1\0\4\67\1\236"+
    "\4\67\1\0\1\67\1\0\5\67\11\0\25\67\1\u0124"+
    "\14\67\1\63\5\0\1\67\5\0\5\67\1\u0125\1\0"+
    "\4\67\1\236\4\67\1\0\1\67\1\0\5\67\11\0"+
    "\42\67\1\63\5\0\1\67\5\0\6\67\1\0\4\67"+
    "\1\236\4\67\1\0\1\67\1\0\2\67\1\u0126\2\67"+
    "\11\0\4\67\1\u0127\35\67\1\63\5\0\1\67\5\0"+
    "\1\u0128\4\67\1\u0129\1\0\4\67\1\236\4\67\1\0"+
    "\1\67\1\0\5\67\11\0\42\67\1\63\5\0\1\67"+
    "\5\0\4\67\1\u012a\1\67\1\0\4\67\1\236\4\67"+
    "\1\0\1\67\1\0\5\67\11\0\42\67\1\63\5\0"+
    "\1\67\5\0\3\67\1\u012b\2\67\1\0\4\67\1\236"+
    "\4\67\1\0\1\67\1\0\5\67\11\0\27\67\1\u012c"+
    "\12\67\1\63\5\0\1\67\5\0\6\67\1\0\4\67"+
    "\1\236\2\67\1\u012d\1\67\1\0\1\67\1\0\5\67"+
    "\11\0\42\67\1\63\5\0\1\67\5\0\1\67\1\u012e"+
    "\1\u012f\3\67\1\0\4\67\1\236\4\67\1\0\1\67"+
    "\1\0\5\67\11\0\42\67\1\63\5\0\1\67\5\0"+
    "\6\67\1\0\4\67\1\236\1\u0130\3\67\1\0\1\67"+
    "\1\0\5\67\11\0\25\67\1\u0131\6\67\1\262\5\67"+
    "\1\63\5\0\1\67\5\0\2\67\1\u0132\1\u0133\2\67"+
    "\1\0\4\67\1\236\4\67\1\0\1\67\1\0\5\67"+
    "\11\0\42\67\1\63\5\0\1\67\5\0\4\67\1\u0134"+
    "\1\67\1\0\4\67\1\236\4\67\1\0\1\67\1\0"+
    "\5\67\11\0\42\67\10\0\1\32\11\0\1\71\74\0"+
    "\1\273\5\0\1\273\5\0\6\273\1\0\11\273\1\0"+
    "\1\273\1\0\5\273\11\0\43\273\5\0\1\273\5\0"+
    "\6\273\1\0\2\u0135\1\273\1\u0135\4\273\1\u0135\1\0"+
    "\1\273\1\0\5\273\1\u0136\3\0\1\u0136\4\0\22\273"+
    "\1\u0135\20\273\5\0\1\273\5\0\6\273\1\0\2\277"+
    "\1\273\1\277\4\273\1\277\1\0\1\273\1\0\2\273"+
    "\2\275\1\276\11\0\7\273\1\275\12\273\1\277\1\273"+
    "\1\276\3\273\1\275\12\273\5\0\1\273\5\0\6\273"+
    "\1\0\2\300\1\273\1\300\4\273\1\300\1\0\1\273"+
    "\1\0\2\273\2\275\1\276\1\0\1\277\7\0\7\273"+
    "\1\275\12\273\1\300\1\273\1\276\3\273\1\275\12\273"+
    "\5\0\1\273\5\0\6\273\1\0\1\300\1\301\1\273"+
    "\1\301\4\273\1\301\1\0\1\273\1\0\1\273\1\u0137"+
    "\2\275\1\276\1\0\1\277\7\0\7\273\1\275\12\273"+
    "\1\301\1\273\1\276\3\273\1\275\1\u0137\11\273\5\0"+
    "\1\273\5\0\1\273\1\u0138\4\273\1\0\4\u0138\3\273"+
    "\2\u0138\1\0\1\273\1\0\2\273\3\u0138\11\0\2\u0138"+
    "\5\273\1\u0138\12\273\1\u0138\1\273\2\u0138\2\273\1\u0138"+
    "\11\273\1\63\5\0\1\67\5\0\6\67\1\0\4\67"+
    "\1\236\4\67\1\0\1\67\1\0\5\67\11\0\24\67"+
    "\1\u0139\15\67\1\63\5\0\1\67\5\0\6\67\1\0"+
    "\4\67\1\236\4\67\1\0\1\67\1\0\5\67\11\0"+
    "\31\67\1\u013a\10\67\1\63\5\0\1\67\5\0\6\67"+
    "\1\0\4\67\1\236\4\67\1\0\1\67\1\0\5\67"+
    "\11\0\32\67\1\262\7\67\1\63\5\0\1\67\5\0"+
    "\5\67\1\u013b\1\0\4\67\1\236\4\67\1\0\1\67"+
    "\1\0\5\67\11\0\42\67\1\63\5\0\1\67\5\0"+
    "\6\67\1\0\4\67\1\236\4\67\1\0\1\67\1\0"+
    "\5\67\11\0\24\67\1\u013c\15\67\1\63\5\0\1\67"+
    "\5\0\6\67\1\0\4\67\1\236\4\67\1\0\1\67"+
    "\1\0\5\67\11\0\27\67\1\u013d\12\67\1\63\5\0"+
    "\1\67\5\0\5\67\1\u013e\1\0\4\67\1\236\4\67"+
    "\1\0\1\67\1\0\5\67\11\0\42\67\1\63\5\0"+
    "\1\67\5\0\6\67\1\0\4\67\1\236\1\67\1\u013f"+
    "\2\67\1\0\1\67\1\0\5\67\11\0\42\67\1\63"+
    "\5\0\1\67\5\0\6\67\1\0\4\67\1\236\1\67"+
    "\1\u0140\2\67\1\0\1\67\1\0\5\67\11\0\42\67"+
    "\1\63\5\0\1\67\5\0\6\67\1\0\4\67\1\236"+
    "\4\67\1\0\1\67\1\0\5\67\11\0\31\67\1\u0141"+
    "\10\67\1\63\5\0\1\67\5\0\2\67\1\262\3\67"+
    "\1\0\4\67\1\236\4\67\1\0\1\67\1\0\5\67"+
    "\11\0\42\67\1\63\5\0\1\67\5\0\6\67\1\0"+
    "\4\67\1\236\4\67\1\0\1\67\1\0\5\67\11\0"+
    "\27\67\1\u0142\12\67\1\63\5\0\1\67\5\0\6\67"+
    "\1\0\4\67\1\236\4\67\1\0\1\67\1\0\5\67"+
    "\11\0\4\67\1\262\35\67\1\63\5\0\1\67\5\0"+
    "\6\67\1\0\4\67\1\236\4\67\1\0\1\67\1\0"+
    "\3\67\1\u0143\1\67\11\0\42\67\1\63\5\0\1\67"+
    "\5\0\1\67\1\u0144\4\67\1\0\4\67\1\236\4\67"+
    "\1\0\1\67\1\0\5\67\11\0\42\67\1\63\5\0"+
    "\1\67\5\0\6\67\1\0\4\67\1\236\1\u0145\3\67"+
    "\1\0\1\67\1\0\5\67\11\0\42\67\1\63\5\0"+
    "\1\67\5\0\1\u0120\5\67\1\0\4\67\1\236\4\67"+
    "\1\0\1\67\1\0\5\67\11\0\42\67\1\63\5\0"+
    "\1\67\5\0\6\67\1\0\4\67\1\236\4\67\1\0"+
    "\1\67\1\0\5\67\11\0\25\67\1\u0146\14\67\1\63"+
    "\5\0\1\67\5\0\4\67\1\u0147\1\u0148\1\0\4\67"+
    "\1\236\4\67\1\0\1\67\1\0\5\67\11\0\42\67"+
    "\1\63\5\0\1\67\5\0\1\u0149\5\67\1\0\4\67"+
    "\1\236\4\67\1\0\1\67\1\0\5\67\11\0\42\67"+
    "\1\63\5\0\1\67\5\0\6\67\1\0\4\67\1\236"+
    "\2\67\1\u014a\1\67\1\0\1\67\1\0\3\67\1\u014b"+
    "\1\67\11\0\31\67\1\u014c\10\67\1\63\5\0\1\67"+
    "\5\0\6\67\1\0\4\67\1\236\1\u014d\3\67\1\0"+
    "\1\67\1\0\5\67\11\0\42\67\1\63\5\0\1\67"+
    "\5\0\6\67\1\0\4\67\1\236\1\67\1\u014e\2\67"+
    "\1\0\1\67\1\0\5\67\11\0\42\67\1\63\5\0"+
    "\1\67\5\0\5\67\1\u014f\1\0\4\67\1\236\4\67"+
    "\1\0\1\67\1\0\5\67\11\0\42\67\1\63\5\0"+
    "\1\67\5\0\3\67\1\u0150\2\67\1\0\4\67\1\236"+
    "\4\67\1\0\1\67\1\0\5\67\11\0\42\67\1\63"+
    "\5\0\1\67\5\0\3\67\1\u0151\2\67\1\0\4\67"+
    "\1\236\4\67\1\0\1\67\1\0\5\67\11\0\31\67"+
    "\1\u0152\10\67\1\63\5\0\1\67\5\0\5\67\1\u0153"+
    "\1\0\4\67\1\236\4\67\1\0\1\67\1\0\5\67"+
    "\11\0\42\67\16\0\1\u0154\144\0\1\u0155\52\0\2\30"+
    "\1\0\1\30\1\0\3\30\4\0\3\30\1\u0156\2\30"+
    "\1\0\47\30\1\u0156\26\30\1\0\1\30\1\0\3\30"+
    "\4\0\1\30\1\u0102\4\30\1\0\2\30\1\u0102\3\30"+
    "\1\57\27\30\1\57\37\30\1\0\1\30\1\0\3\30"+
    "\4\0\3\30\1\u0157\2\30\1\0\35\30\1\u0158\11\30"+
    "\1\u0157\11\30\1\u0158\14\30\1\0\1\30\1\0\3\30"+
    "\4\0\6\30\1\0\15\30\1\163\45\30\1\163\12\30"+
    "\1\0\1\30\1\0\3\30\4\0\6\30\1\0\52\30"+
    "\1\u0102\14\30\1\u0102\6\30\1\0\1\30\1\0\3\30"+
    "\4\0\6\30\1\0\20\30\1\u0159\35\30\1\u0159\17\30"+
    "\1\0\1\30\1\0\3\30\4\0\4\30\1\57\1\30"+
    "\1\0\43\30\1\57\32\30\1\0\1\30\1\0\3\30"+
    "\4\0\6\30\1\0\15\30\1\226\45\30\1\226\12\30"+
    "\1\0\1\30\1\0\3\30\4\0\5\30\1\u0102\1\0"+
    "\44\30\1\u0102\31\30\1\0\1\30\1\0\3\30\4\0"+
    "\5\30\1\u015a\1\0\44\30\1\u015a\31\30\1\0\1\30"+
    "\1\0\3\30\4\0\6\30\1\0\45\30\1\u015b\22\30"+
    "\1\u015b\5\30\1\0\1\30\1\0\3\30\4\0\6\30"+
    "\1\0\40\30\1\u015c\30\30\1\u015c\4\30\1\0\1\30"+
    "\1\0\3\30\4\0\6\30\1\0\6\30\1\u015d\27\30"+
    "\1\u015d\37\30\1\0\1\30\1\0\3\30\4\0\6\30"+
    "\1\0\5\30\1\u0106\40\30\1\u0106\27\30\1\0\1\30"+
    "\1\0\3\30\4\0\6\30\1\0\37\30\1\u0102\26\30"+
    "\1\u0102\7\30\1\0\1\30\1\0\3\30\4\0\6\30"+
    "\1\0\32\30\1\u015e\24\30\1\u015e\16\30\1\0\1\30"+
    "\1\0\3\30\4\0\3\30\1\u015f\2\30\1\0\47\30"+
    "\1\u015f\26\30\1\0\1\30\1\0\3\30\4\0\6\30"+
    "\1\0\32\30\1\u0105\24\30\1\u0105\16\30\1\0\1\30"+
    "\1\0\3\30\4\0\6\30\1\0\35\30\1\u0106\23\30"+
    "\1\u0106\14\30\1\0\1\30\1\0\3\30\4\0\5\30"+
    "\1\u0160\1\0\44\30\1\u0160\31\30\1\0\1\30\1\0"+
    "\3\30\4\0\1\30\1\143\4\30\1\0\2\30\1\143"+
    "\73\30\1\0\1\30\1\0\3\30\4\0\2\30\1\u0161"+
    "\3\30\1\0\34\30\1\u0161\41\30\1\0\1\30\1\0"+
    "\3\30\4\0\6\30\1\0\40\30\1\u0162\30\30\1\u0162"+
    "\4\30\1\0\1\30\1\0\3\30\4\0\5\30\1\u0163"+
    "\1\0\44\30\1\u0163\31\30\1\0\1\30\1\0\3\30"+
    "\4\0\1\30\1\u0164\4\30\1\0\2\30\1\u0164\73\30"+
    "\1\0\1\30\1\0\3\30\4\0\6\30\1\0\20\30"+
    "\1\u0165\35\30\1\u0165\17\30\1\0\1\30\1\0\3\30"+
    "\4\0\6\30\1\0\37\30\1\57\26\30\1\57\7\30"+
    "\1\0\1\30\1\0\3\30\4\0\6\30\1\0\35\30"+
    "\1\u0166\23\30\1\u0166\14\30\1\0\1\30\1\0\3\30"+
    "\4\0\6\30\1\0\50\30\1\57\7\30\1\57\15\30"+
    "\1\0\1\30\1\0\3\30\4\0\6\30\1\0\20\30"+
    "\1\u0167\35\30\1\u0167\17\30\1\0\1\30\1\0\3\30"+
    "\4\0\6\30\1\0\20\30\1\226\35\30\1\226\17\30"+
    "\1\0\1\30\1\0\3\30\4\0\6\30\1\0\20\30"+
    "\1\231\35\30\1\231\17\30\1\0\1\30\1\0\3\30"+
    "\4\0\6\30\1\0\40\30\1\u0168\30\30\1\u0168\4\30"+
    "\1\0\1\30\1\0\3\30\4\0\6\30\1\0\15\30"+
    "\1\u0169\45\30\1\u0169\12\30\1\0\1\30\1\0\3\30"+
    "\4\0\6\30\1\0\40\30\1\57\30\30\1\57\4\30"+
    "\1\0\1\30\1\0\3\30\4\0\5\30\1\57\1\0"+
    "\44\30\1\57\31\30\1\0\1\30\1\0\3\30\4\0"+
    "\6\30\1\0\20\30\1\227\35\30\1\227\17\30\1\0"+
    "\1\30\1\0\3\30\4\0\6\30\1\0\35\30\1\u016a"+
    "\23\30\1\u016a\14\30\1\0\1\30\1\0\3\30\4\0"+
    "\6\30\1\0\32\30\1\57\24\30\1\57\16\30\1\0"+
    "\1\30\1\0\3\30\4\0\6\30\1\0\15\30\1\u016b"+
    "\45\30\1\u016b\12\30\1\0\1\30\1\0\3\30\4\0"+
    "\2\30\1\u016c\3\30\1\0\34\30\1\u016c\41\30\1\0"+
    "\1\30\1\0\3\30\4\0\3\30\1\u0163\2\30\1\0"+
    "\45\30\1\u015b\1\30\1\u0163\20\30\1\u015b\5\30\1\0"+
    "\1\30\1\0\3\30\4\0\5\30\1\u016d\1\0\44\30"+
    "\1\u016d\31\30\1\0\1\30\1\0\3\30\4\0\6\30"+
    "\1\0\5\30\1\57\40\30\1\57\27\30\1\0\1\30"+
    "\1\0\3\30\4\0\6\30\1\0\51\30\1\u016e\24\30"+
    "\1\0\1\30\1\0\3\30\4\0\6\30\1\0\45\30"+
    "\1\u016f\22\30\1\u016f\3\30\15\0\1\u0170\101\0\1\63"+
    "\5\0\1\63\5\0\1\63\1\u0171\4\63\1\0\4\u0171"+
    "\3\63\2\u0171\1\0\1\63\1\0\2\63\3\u0171\11\0"+
    "\2\u0171\5\63\1\u0171\12\63\1\u0171\1\63\2\u0171\2\63"+
    "\1\u0171\11\63\2\u0113\1\0\6\u0113\1\u0172\15\u0113\1\u0173"+
    "\67\u0113\2\72\1\0\6\72\1\u0174\15\72\1\237\67\72"+
    "\2\u0113\1\0\6\u0113\1\u0172\3\u0113\1\u0175\5\u0113\4\u0175"+
    "\1\u0173\2\u0113\2\u0175\5\u0113\3\u0175\11\u0113\2\u0175\5\u0113"+
    "\1\u0175\12\u0113\1\u0175\1\u0113\2\u0175\2\u0113\1\u0175\11\u0113"+
    "\2\u0116\1\0\7\u0116\1\242\106\u0116\1\0\7\u0116\1\142"+
    "\11\u0116\1\u0118\1\u0116\1\u0118\4\u0116\1\u0118\43\u0116\1\u0118"+
    "\21\u0116\1\0\7\u0116\1\142\11\u0116\1\240\1\u0116\1\240"+
    "\4\u0116\1\240\43\u0116\1\240\21\u0116\1\0\7\u0116\1\242"+
    "\2\u0116\1\u0176\5\u0116\4\u0176\3\u0116\2\u0176\5\u0116\3\u0176"+
    "\11\u0116\2\u0176\5\u0116\1\u0176\12\u0116\1\u0176\1\u0116\2\u0176"+
    "\2\u0116\1\u0176\11\u0116\13\0\1\u0177\103\0\1\63\5\0"+
    "\1\67\5\0\5\67\1\u0178\1\0\4\67\1\236\4\67"+
    "\1\0\1\67\1\0\5\67\11\0\42\67\1\63\5\0"+
    "\1\67\5\0\6\67\1\0\4\67\1\236\4\67\1\0"+
    "\1\67\1\0\5\67\11\0\24\67\1\315\15\67\1\63"+
    "\5\0\1\67\5\0\5\67\1\u0121\1\0\4\67\1\236"+
    "\4\67\1\0\1\67\1\0\5\67\11\0\42\67\1\63"+
    "\5\0\1\67\5\0\2\67\1\u0179\3\67\1\0\4\67"+
    "\1\236\4\67\1\0\1\67\1\0\5\67\11\0\42\67"+
    "\1\63\5\0\1\67\5\0\1\67\1\u017a\4\67\1\0"+
    "\4\67\1\236\4\67\1\0\1\67\1\0\5\67\11\0"+
    "\42\67\1\63\5\0\1\67\5\0\6\67\1\0\4\67"+
    "\1\236\4\67\1\0\1\67\1\0\5\67\11\0\24\67"+
    "\1\262\15\67\1\63\5\0\1\67\5\0\1\67\1\u014f"+
    "\4\67\1\0\4\67\1\236\4\67\1\0\1\67\1\0"+
    "\5\67\11\0\42\67\1\63\5\0\1\67\5\0\1\u017b"+
    "\4\67\1\u017c\1\0\4\67\1\236\4\67\1\0\1\67"+
    "\1\0\5\67\11\0\42\67\1\63\5\0\1\67\5\0"+
    "\1\u0133\5\67\1\0\4\67\1\236\4\67\1\0\1\67"+
    "\1\0\5\67\11\0\42\67\1\63\5\0\1\67\5\0"+
    "\2\67\1\u017d\3\67\1\0\4\67\1\236\4\67\1\0"+
    "\1\67\1\0\5\67\11\0\42\67\1\63\5\0\1\67"+
    "\5\0\6\67\1\0\4\67\1\236\1\u017e\3\67\1\0"+
    "\1\67\1\0\5\67\11\0\42\67\1\63\5\0\1\67"+
    "\5\0\3\67\1\u017f\2\67\1\0\4\67\1\236\4\67"+
    "\1\0\1\67\1\0\5\67\11\0\42\67\1\63\5\0"+
    "\1\67\5\0\6\67\1\0\4\67\1\236\4\67\1\0"+
    "\1\67\1\0\5\67\11\0\25\67\1\u0180\14\67\1\63"+
    "\5\0\1\67\5\0\5\67\1\u0181\1\0\4\67\1\236"+
    "\4\67\1\0\1\67\1\0\5\67\11\0\42\67\1\63"+
    "\5\0\1\67\5\0\6\67\1\0\4\67\1\236\4\67"+
    "\1\0\1\67\1\0\5\67\11\0\24\67\1\u0182\15\67"+
    "\1\63\5\0\1\67\5\0\6\67\1\0\4\67\1\236"+
    "\4\67\1\0\1\67\1\0\5\67\11\0\27\67\1\u0183"+
    "\1\67\1\u0184\10\67\1\63\5\0\1\67\5\0\6\67"+
    "\1\0\4\67\1\236\4\67\1\0\1\67\1\0\5\67"+
    "\11\0\35\67\1\u0185\4\67\1\63\5\0\1\67\5\0"+
    "\5\67\1\u0186\1\0\4\67\1\236\4\67\1\0\1\67"+
    "\1\0\5\67\11\0\42\67\1\63\5\0\1\67\5\0"+
    "\6\67\1\0\4\67\1\236\4\67\1\0\1\67\1\0"+
    "\5\67\11\0\31\67\1\u0178\10\67\1\63\5\0\1\67"+
    "\5\0\6\67\1\0\4\67\1\236\4\67\1\0\1\67"+
    "\1\0\5\67\11\0\26\67\1\u0187\13\67\1\63\5\0"+
    "\1\67\5\0\1\u0188\5\67\1\0\4\67\1\236\4\67"+
    "\1\0\1\67\1\0\5\67\11\0\42\67\1\63\5\0"+
    "\1\67\5\0\6\67\1\0\4\67\1\236\4\67\1\0"+
    "\1\67\1\0\5\67\11\0\24\67\1\u0189\15\67\1\63"+
    "\5\0\1\67\5\0\6\67\1\0\4\67\1\236\1\67"+
    "\1\u018a\2\67\1\0\1\67\1\0\5\67\11\0\42\67"+
    "\1\63\5\0\1\67\5\0\6\67\1\0\4\67\1\236"+
    "\4\67\1\0\1\67\1\0\5\67\11\0\27\67\1\u018b"+
    "\12\67\1\63\5\0\1\67\5\0\1\262\5\67\1\0"+
    "\4\67\1\236\4\67\1\0\1\67\1\0\5\67\11\0"+
    "\42\67\1\63\5\0\1\67\5\0\6\67\1\0\4\67"+
    "\1\236\4\67\1\0\1\67\1\0\5\67\11\0\24\67"+
    "\1\u018c\15\67\1\273\5\0\1\273\5\0\6\273\1\0"+
    "\2\u0135\1\273\1\u0135\4\273\1\u0135\1\0\1\273\1\0"+
    "\2\273\2\275\1\273\11\0\7\273\1\275\12\273\1\u0135"+
    "\5\273\1\275\11\273\23\0\2\u0135\1\0\1\u0135\4\0"+
    "\1\u0135\43\0\1\u0135\17\0\1\273\5\0\1\273\5\0"+
    "\1\273\1\u0138\4\273\1\0\4\u0138\3\273\2\u0138\1\0"+
    "\1\273\1\0\1\273\1\u0137\3\u0138\11\0\2\u0138\5\273"+
    "\1\u0138\12\273\1\u0138\1\273\2\u0138\2\273\1\u0138\1\u0137"+
    "\10\273\1\63\5\0\1\67\5\0\1\321\5\67\1\0"+
    "\4\67\1\236\4\67\1\0\1\67\1\0\5\67\11\0"+
    "\42\67\1\63\5\0\1\67\5\0\6\67\1\0\4\67"+
    "\1\236\4\67\1\0\1\67\1\0\5\67\11\0\31\67"+
    "\1\262\10\67\1\63\5\0\1\67\5\0\3\67\1\u018d"+
    "\2\67\1\0\4\67\1\236\4\67\1\0\1\67\1\0"+
    "\5\67\11\0\42\67\1\63\5\0\1\67\5\0\6\67"+
    "\1\0\4\67\1\236\4\67\1\0\1\67\1\0\5\67"+
    "\11\0\25\67\1\u018e\14\67\1\63\5\0\1\67\5\0"+
    "\6\67\1\0\4\67\1\236\4\67\1\0\1\67\1\0"+
    "\5\67\11\0\31\67\1\u018f\10\67\1\63\5\0\1\67"+
    "\5\0\6\67\1\0\4\67\1\236\4\67\1\0\1\67"+
    "\1\0\5\67\11\0\24\67\1\u017d\15\67\1\63\5\0"+
    "\1\67\5\0\6\67\1\0\4\67\1\236\4\67\1\0"+
    "\1\67\1\0\5\67\11\0\25\67\1\u0190\14\67\1\63"+
    "\5\0\1\67\5\0\1\67\1\u0191\4\67\1\0\4\67"+
    "\1\236\4\67\1\0\1\67\1\0\5\67\11\0\42\67"+
    "\1\63\5\0\1\67\5\0\1\u0130\5\67\1\0\4\67"+
    "\1\236\4\67\1\0\1\67\1\0\5\67\11\0\42\67"+
    "\1\63\5\0\1\67\5\0\6\67\1\0\4\67\1\236"+
    "\4\67\1\0\1\67\1\0\5\67\11\0\25\67\1\u0179"+
    "\14\67\1\63\5\0\1\67\5\0\3\67\1\u0192\2\67"+
    "\1\0\4\67\1\236\4\67\1\0\1\67\1\0\5\67"+
    "\11\0\42\67\1\63\5\0\1\67\5\0\6\67\1\0"+
    "\4\67\1\236\4\67\1\0\1\67\1\0\5\67\11\0"+
    "\25\67\1\u0193\14\67\1\63\5\0\1\67\5\0\6\67"+
    "\1\0\4\67\1\236\4\67\1\0\1\67\1\0\5\67"+
    "\11\0\37\67\1\262\2\67\1\63\5\0\1\67\5\0"+
    "\6\67\1\0\4\67\1\236\4\67\1\0\1\67\1\0"+
    "\5\67\11\0\31\67\1\u0194\10\67\1\63\5\0\1\67"+
    "\5\0\6\67\1\0\4\67\1\236\4\67\1\0\1\67"+
    "\1\0\5\67\11\0\27\67\1\u0183\12\67\1\63\5\0"+
    "\1\67\5\0\6\67\1\0\4\67\1\236\4\67\1\0"+
    "\1\67\1\0\5\67\11\0\24\67\1\u0195\15\67\1\63"+
    "\5\0\1\67\5\0\5\67\1\u0196\1\0\4\67\1\236"+
    "\4\67\1\0\1\67\1\0\5\67\11\0\42\67\1\63"+
    "\5\0\1\67\5\0\6\67\1\0\4\67\1\236\1\u0197"+
    "\3\67\1\0\1\67\1\0\5\67\11\0\42\67\1\63"+
    "\5\0\1\67\5\0\6\67\1\0\4\67\1\236\4\67"+
    "\1\0\1\67\1\0\5\67\11\0\25\67\1\u0198\14\67"+
    "\1\63\5\0\1\67\5\0\6\67\1\0\4\67\1\236"+
    "\4\67\1\0\1\67\1\0\5\67\11\0\24\67\1\u0199"+
    "\15\67\1\63\5\0\1\67\5\0\6\67\1\0\4\67"+
    "\1\236\2\67\1\u019a\1\67\1\0\1\67\1\0\5\67"+
    "\11\0\42\67\1\63\5\0\1\67\5\0\6\67\1\0"+
    "\4\67\1\236\4\67\1\0\1\67\1\0\5\67\11\0"+
    "\36\67\1\u017d\3\67\1\63\5\0\1\67\5\0\6\67"+
    "\1\0\4\67\1\236\4\67\1\0\1\67\1\0\5\67"+
    "\11\0\33\67\1\262\6\67\1\63\5\0\1\67\5\0"+
    "\6\67\1\0\4\67\1\236\4\67\1\0\1\67\1\0"+
    "\5\67\11\0\31\67\1\u0120\10\67\1\63\5\0\1\67"+
    "\5\0\6\67\1\0\4\67\1\236\4\67\1\0\1\67"+
    "\1\0\5\67\11\0\30\67\1\262\11\67\1\63\5\0"+
    "\1\67\5\0\6\67\1\0\4\67\1\236\4\67\1\0"+
    "\1\67\1\0\5\67\11\0\25\67\1\u019b\14\67\1\63"+
    "\5\0\1\67\5\0\6\67\1\0\4\67\1\236\4\67"+
    "\1\0\1\67\1\0\5\67\11\0\27\67\1\262\12\67"+
    "\17\0\1\u019c\77\0\2\30\1\0\1\30\1\0\3\30"+
    "\4\0\4\30\1\u0106\1\30\1\0\43\30\1\u0106\32\30"+
    "\1\0\1\30\1\0\3\30\4\0\6\30\1\0\50\30"+
    "\1\163\7\30\1\163\15\30\1\0\1\30\1\0\3\30"+
    "\4\0\6\30\1\0\6\30\1\162\27\30\1\162\37\30"+
    "\1\0\1\30\1\0\3\30\4\0\1\30\1\u0106\4\30"+
    "\1\0\2\30\1\u0106\73\30\1\0\1\30\1\0\3\30"+
    "\4\0\3\30\1\u0163\2\30\1\0\47\30\1\u0163\26\30"+
    "\1\0\1\30\1\0\3\30\4\0\2\30\1\u019d\3\30"+
    "\1\0\34\30\1\u019d\41\30\1\0\1\30\1\0\3\30"+
    "\4\0\6\30\1\0\20\30\1\u019e\35\30\1\u019e\17\30"+
    "\1\0\1\30\1\0\3\30\4\0\6\30\1\0\41\30"+
    "\1\u019f\20\30\1\u019f\13\30\1\0\1\30\1\0\3\30"+
    "\4\0\6\30\1\0\40\30\1\163\30\30\1\163\4\30"+
    "\1\0\1\30\1\0\3\30\4\0\6\30\1\0\6\30"+
    "\1\u01a0\27\30\1\u01a0\37\30\1\0\1\30\1\0\3\30"+
    "\4\0\6\30\1\0\32\30\1\u01a1\24\30\1\u01a1\16\30"+
    "\1\0\1\30\1\0\3\30\4\0\6\30\1\0\32\30"+
    "\1\u01a2\24\30\1\u01a2\16\30\1\0\1\30\1\0\3\30"+
    "\4\0\6\30\1\0\35\30\1\225\23\30\1\225\14\30"+
    "\1\0\1\30\1\0\3\30\4\0\6\30\1\0\50\30"+
    "\1\u01a3\7\30\1\u01a3\15\30\1\0\1\30\1\0\3\30"+
    "\4\0\6\30\1\0\16\30\2\u01a4\56\30\1\0\1\30"+
    "\1\0\3\30\4\0\6\30\1\0\5\30\1\u0167\40\30"+
    "\1\u0167\27\30\1\0\1\30\1\0\3\30\4\0\6\30"+
    "\1\0\6\30\1\227\27\30\1\227\37\30\1\0\1\30"+
    "\1\0\3\30\4\0\6\30\1\0\20\30\1\u01a5\35\30"+
    "\1\u01a5\17\30\1\0\1\30\1\0\3\30\4\0\6\30"+
    "\1\0\41\30\1\u01a6\20\30\1\u01a6\13\30\1\0\1\30"+
    "\1\0\3\30\4\0\6\30\1\0\6\30\1\u01a7\27\30"+
    "\1\u01a7\37\30\1\0\1\30\1\0\3\30\4\0\6\30"+
    "\1\0\20\30\1\u0106\35\30\1\u0106\17\30\1\0\1\30"+
    "\1\0\3\30\4\0\6\30\1\0\20\30\1\u01a8\35\30"+
    "\1\u01a8\17\30\1\0\1\30\1\0\3\30\4\0\3\30"+
    "\1\u01a9\2\30\1\0\47\30\1\u01a9\26\30\1\0\1\30"+
    "\1\0\3\30\4\0\6\30\1\0\5\30\1\u01aa\40\30"+
    "\1\u01aa\27\30\1\0\1\30\1\0\3\30\4\0\6\30"+
    "\1\0\20\30\1\225\35\30\1\225\15\30\16\0\1\u01ab"+
    "\100\0\1\63\5\0\1\63\5\0\1\63\1\u01ac\4\63"+
    "\1\0\4\u01ac\3\63\2\u01ac\1\0\1\63\1\0\2\63"+
    "\3\u01ac\11\0\2\u01ac\5\63\1\u01ac\12\63\1\u01ac\1\63"+
    "\2\u01ac\2\63\1\u01ac\11\63\2\u0113\1\0\24\u0113\1\u0173"+
    "\71\u0113\1\0\6\u0113\1\u0172\3\u0113\1\u01ad\5\u0113\4\u01ad"+
    "\1\u0173\2\u0113\2\u01ad\5\u0113\3\u01ad\11\u0113\2\u01ad\5\u0113"+
    "\1\u01ad\12\u0113\1\u01ad\1\u0113\2\u01ad\2\u0113\1\u01ad\11\u0113"+
    "\2\u0116\1\0\7\u0116\1\242\2\u0116\1\u01ae\5\u0116\4\u01ae"+
    "\3\u0116\2\u01ae\5\u0116\3\u01ae\11\u0116\2\u01ae\5\u0116\1\u01ae"+
    "\12\u0116\1\u01ae\1\u0116\2\u01ae\2\u0116\1\u01ae\11\u0116\1\63"+
    "\5\0\1\67\5\0\3\67\1\u01af\2\67\1\0\4\67"+
    "\1\236\4\67\1\0\1\67\1\0\5\67\11\0\42\67"+
    "\1\63\5\0\1\67\5\0\5\67\1\u017d\1\0\4\67"+
    "\1\236\4\67\1\0\1\67\1\0\5\67\11\0\42\67"+
    "\1\63\5\0\1\67\5\0\6\67\1\0\4\67\1\236"+
    "\4\67\1\0\1\67\1\0\5\67\11\0\33\67\1\u01b0"+
    "\6\67\1\63\5\0\1\67\5\0\5\67\1\262\1\0"+
    "\4\67\1\236\4\67\1\0\1\67\1\0\5\67\11\0"+
    "\42\67\1\63\5\0\1\67\5\0\3\67\1\u01b1\2\67"+
    "\1\0\4\67\1\236\4\67\1\0\1\67\1\0\5\67"+
    "\11\0\42\67\1\63\5\0\1\67\5\0\2\67\1\u01b2"+
    "\3\67\1\0\4\67\1\236\4\67\1\0\1\67\1\0"+
    "\5\67\11\0\42\67\1\63\5\0\1\67\5\0\6\67"+
    "\1\0\4\67\1\236\1\67\1\u01b3\2\67\1\0\1\67"+
    "\1\0\5\67\11\0\42\67\1\63\5\0\1\67\5\0"+
    "\6\67\1\0\4\67\1\236\4\67\1\0\1\67\1\0"+
    "\5\67\11\0\4\67\1\u0194\35\67\1\63\5\0\1\67"+
    "\5\0\6\67\1\0\4\67\1\236\4\67\1\0\1\67"+
    "\1\0\5\67\11\0\25\67\1\u01b4\14\67\1\63\5\0"+
    "\1\67\5\0\2\67\1\u01b5\3\67\1\0\4\67\1\236"+
    "\4\67\1\0\1\67\1\0\5\67\11\0\42\67\1\63"+
    "\5\0\1\67\5\0\2\67\1\u017b\3\67\1\0\4\67"+
    "\1\236\4\67\1\0\1\67\1\0\5\67\11\0\42\67"+
    "\1\63\5\0\1\67\5\0\6\67\1\0\4\67\1\236"+
    "\4\67\1\0\1\67\1\0\5\67\11\0\24\67\1\u01b6"+
    "\15\67\1\63\5\0\1\67\5\0\6\67\1\0\4\67"+
    "\1\236\4\67\1\0\1\67\1\0\5\67\11\0\25\67"+
    "\1\u0199\14\67\1\63\5\0\1\67\5\0\6\67\1\0"+
    "\4\67\1\236\4\67\1\0\1\67\1\0\5\67\11\0"+
    "\24\67\1\u01b7\15\67\1\63\5\0\1\67\5\0\6\67"+
    "\1\0\4\67\1\236\4\67\1\0\1\67\1\0\5\67"+
    "\11\0\25\67\1\u01b8\14\67\1\63\5\0\1\67\5\0"+
    "\6\67\1\0\4\67\1\236\4\67\1\0\1\67\1\0"+
    "\5\67\11\0\24\67\1\u01b9\15\67\1\63\5\0\1\67"+
    "\5\0\1\u01ba\5\67\1\0\4\67\1\236\4\67\1\0"+
    "\1\67\1\0\5\67\11\0\42\67\1\63\5\0\1\67"+
    "\5\0\6\67\1\0\4\67\1\236\4\67\1\0\1\67"+
    "\1\0\5\67\11\0\32\67\1\u01bb\7\67\1\63\5\0"+
    "\1\67\5\0\6\67\1\0\4\67\1\236\4\67\1\0"+
    "\1\67\1\0\5\67\11\0\27\67\1\u01bc\12\67\1\63"+
    "\5\0\1\67\5\0\6\67\1\0\4\67\1\236\4\67"+
    "\1\0\1\67\1\0\5\67\11\0\35\67\1\u0120\4\67"+
    "\1\63\5\0\1\67\5\0\6\67\1\0\4\67\1\236"+
    "\4\67\1\0\1\67\1\0\5\67\11\0\26\67\1\262"+
    "\13\67\1\63\5\0\1\67\5\0\6\67\1\0\4\67"+
    "\1\236\4\67\1\0\1\67\1\0\5\67\11\0\24\67"+
    "\1\u01bd\15\67\1\63\5\0\1\67\5\0\6\67\1\0"+
    "\4\67\1\236\4\67\1\0\1\67\1\0\5\67\11\0"+
    "\31\67\1\u01be\10\67\1\63\5\0\1\67\5\0\5\67"+
    "\1\u01bf\1\0\4\67\1\236\4\67\1\0\1\67\1\0"+
    "\5\67\11\0\42\67\1\63\5\0\1\67\5\0\6\67"+
    "\1\0\4\67\1\236\1\67\1\u01c0\2\67\1\0\1\67"+
    "\1\0\5\67\11\0\42\67\1\63\5\0\1\67\5\0"+
    "\4\67\1\u01c1\1\67\1\0\4\67\1\236\4\67\1\0"+
    "\1\67\1\0\5\67\11\0\42\67\1\63\5\0\1\67"+
    "\5\0\6\67\1\0\4\67\1\236\1\67\1\u01c2\2\67"+
    "\1\0\1\67\1\0\5\67\11\0\42\67\1\63\5\0"+
    "\1\67\5\0\2\67\1\u01c3\3\67\1\0\4\67\1\236"+
    "\4\67\1\0\1\67\1\0\5\67\11\0\42\67\1\63"+
    "\5\0\1\67\5\0\6\67\1\0\4\67\1\236\4\67"+
    "\1\0\1\67\1\0\5\67\11\0\36\67\1\u01c4\3\67"+
    "\1\63\5\0\1\67\5\0\6\67\1\0\4\67\1\236"+
    "\1\u01c5\3\67\1\0\1\67\1\0\5\67\11\0\42\67"+
    "\1\63\5\0\1\67\5\0\5\67\1\u0120\1\0\4\67"+
    "\1\236\4\67\1\0\1\67\1\0\5\67\11\0\42\67"+
    "\1\63\5\0\1\67\5\0\6\67\1\0\4\67\1\236"+
    "\4\67\1\0\1\67\1\0\5\67\11\0\31\67\1\u013e"+
    "\10\67\1\63\5\0\1\67\5\0\5\67\1\333\1\0"+
    "\4\67\1\236\4\67\1\0\1\67\1\0\5\67\11\0"+
    "\42\67\20\0\1\u01c6\76\0\2\30\1\0\1\30\1\0"+
    "\3\30\4\0\6\30\1\0\35\30\1\u01c7\23\30\1\u01c7"+
    "\14\30\1\0\1\30\1\0\3\30\4\0\6\30\1\0"+
    "\6\30\1\u0106\27\30\1\u0106\37\30\1\0\1\30\1\0"+
    "\3\30\4\0\6\30\1\0\20\30\1\u01c8\35\30\1\u01c8"+
    "\17\30\1\0\1\30\1\0\3\30\4\0\5\30\1\u01c9"+
    "\1\0\44\30\1\u01c9\31\30\1\0\1\30\1\0\3\30"+
    "\4\0\2\30\1\213\3\30\1\0\34\30\1\213\41\30"+
    "\1\0\1\30\1\0\3\30\4\0\6\30\1\0\40\30"+
    "\1\u01ca\30\30\1\u01ca\4\30\1\0\1\30\1\0\3\30"+
    "\4\0\6\30\1\0\51\30\1\u01cb\24\30\1\0\1\30"+
    "\1\0\3\30\4\0\6\30\1\0\35\30\1\u019e\23\30"+
    "\1\u019e\14\30\1\0\1\30\1\0\3\30\4\0\1\u016b"+
    "\5\30\1\0\42\30\1\u016b\33\30\1\0\1\30\1\0"+
    "\3\30\4\0\6\30\1\0\37\30\1\u0105\26\30\1\u0105"+
    "\7\30\1\0\1\30\1\0\3\30\4\0\1\u01cc\5\30"+
    "\1\0\42\30\1\u01cc\33\30\1\0\1\30\1\0\3\30"+
    "\4\0\1\30\1\u01cd\4\30\1\0\2\30\1\u01cd\73\30"+
    "\1\0\1\30\1\0\3\30\4\0\6\30\1\0\20\30"+
    "\1\163\35\30\1\163\15\30\17\0\1\u01ce\77\0\1\63"+
    "\5\0\1\63\5\0\1\63\1\u01cf\4\63\1\0\4\u01cf"+
    "\3\63\2\u01cf\1\0\1\63\1\0\2\63\3\u01cf\11\0"+
    "\2\u01cf\5\63\1\u01cf\12\63\1\u01cf\1\63\2\u01cf\2\63"+
    "\1\u01cf\11\63\2\u0113\1\0\6\u0113\1\u0172\3\u0113\1\u01d0"+
    "\5\u0113\4\u01d0\1\u0173\2\u0113\2\u01d0\5\u0113\3\u01d0\11\u0113"+
    "\2\u01d0\5\u0113\1\u01d0\12\u0113\1\u01d0\1\u0113\2\u01d0\2\u0113"+
    "\1\u01d0\11\u0113\2\u0116\1\0\7\u0116\1\242\2\u0116\1\u01d1"+
    "\5\u0116\4\u01d1\3\u0116\2\u01d1\5\u0116\3\u01d1\11\u0116\2\u01d1"+
    "\5\u0116\1\u01d1\12\u0116\1\u01d1\1\u0116\2\u01d1\2\u0116\1\u01d1"+
    "\11\u0116\1\63\5\0\1\67\5\0\1\67\1\262\4\67"+
    "\1\0\4\67\1\236\4\67\1\0\1\67\1\0\5\67"+
    "\11\0\42\67\1\63\5\0\1\67\5\0\2\67\1\u01d2"+
    "\3\67\1\0\4\67\1\236\4\67\1\0\1\67\1\0"+
    "\5\67\11\0\42\67\1\63\5\0\1\67\5\0\6\67"+
    "\1\0\4\67\1\236\1\67\1\u01d3\2\67\1\0\1\67"+
    "\1\0\5\67\11\0\42\67\1\63\5\0\1\67\5\0"+
    "\6\67\1\0\4\67\1\236\1\67\1\262\2\67\1\0"+
    "\1\67\1\0\5\67\11\0\42\67\1\63\5\0\1\67"+
    "\5\0\3\67\1\u01d4\2\67\1\0\4\67\1\236\4\67"+
    "\1\0\1\67\1\0\5\67\11\0\42\67\1\63\5\0"+
    "\1\67\5\0\6\67\1\0\4\67\1\236\1\67\1\u01d5"+
    "\2\67\1\0\1\67\1\0\5\67\11\0\42\67\1\63"+
    "\5\0\1\67\5\0\6\67\1\0\4\67\1\236\4\67"+
    "\1\0\1\67\1\0\3\67\1\u01d6\1\67\11\0\42\67"+
    "\1\63\5\0\1\67\5\0\6\67\1\0\4\67\1\236"+
    "\4\67\1\0\1\67\1\0\5\67\11\0\37\67\1\u01d7"+
    "\2\67\1\63\5\0\1\67\5\0\1\67\1\u01d8\4\67"+
    "\1\0\4\67\1\236\4\67\1\0\1\67\1\0\5\67"+
    "\11\0\42\67\1\63\5\0\1\67\5\0\6\67\1\0"+
    "\4\67\1\236\4\67\1\0\1\67\1\0\5\67\11\0"+
    "\36\67\1\u0120\3\67\1\63\5\0\1\67\5\0\6\67"+
    "\1\0\4\67\1\236\4\67\1\0\1\67\1\0\2\67"+
    "\1\u01d9\2\67\11\0\15\67\1\u01da\24\67\1\63\5\0"+
    "\1\67\5\0\3\67\1\u01db\2\67\1\0\4\67\1\236"+
    "\4\67\1\0\1\67\1\0\5\67\11\0\42\67\1\63"+
    "\5\0\1\67\5\0\6\67\1\0\4\67\1\236\4\67"+
    "\1\0\1\67\1\0\3\67\1\262\1\67\11\0\42\67"+
    "\1\63\5\0\1\67\5\0\6\67\1\0\4\67\1\236"+
    "\4\67\1\0\1\67\1\0\5\67\11\0\25\67\1\u01dc"+
    "\14\67\1\63\5\0\1\67\5\0\6\67\1\0\4\67"+
    "\1\236\4\67\1\0\1\67\1\0\5\67\11\0\31\67"+
    "\1\u01dd\10\67\1\63\5\0\1\67\5\0\3\67\1\u01de"+
    "\2\67\1\0\4\67\1\236\4\67\1\0\1\67\1\0"+
    "\5\67\11\0\42\67\1\63\5\0\1\67\5\0\3\67"+
    "\1\u01df\2\67\1\0\4\67\1\236\4\67\1\0\1\67"+
    "\1\0\5\67\11\0\42\67\1\63\5\0\1\67\5\0"+
    "\6\67\1\0\4\67\1\236\4\67\1\0\1\67\1\0"+
    "\5\67\11\0\24\67\1\u0194\15\67\1\63\5\0\1\67"+
    "\5\0\6\67\1\0\4\67\1\236\4\67\1\0\1\67"+
    "\1\0\5\67\11\0\30\67\1\u0133\11\67\1\63\5\0"+
    "\1\67\5\0\6\67\1\0\4\67\1\236\4\67\1\0"+
    "\1\67\1\0\5\67\11\0\25\67\1\u01e0\14\67\1\63"+
    "\5\0\1\67\5\0\6\67\1\0\4\67\1\236\4\67"+
    "\1\0\1\67\1\0\5\67\11\0\36\67\1\u011c\3\67"+
    "\1\63\5\0\1\67\5\0\6\67\1\0\4\67\1\236"+
    "\4\67\1\0\1\67\1\0\5\67\11\0\31\67\1\u017b"+
    "\10\67\21\0\1\u01e1\75\0\2\30\1\0\1\30\1\0"+
    "\3\30\4\0\6\30\1\0\5\30\1\350\40\30\1\350"+
    "\27\30\1\0\1\30\1\0\3\30\4\0\6\30\1\0"+
    "\14\30\1\57\55\30\1\57\3\30\1\0\1\30\1\0"+
    "\3\30\4\0\6\30\1\0\20\30\1\u01e2\35\30\1\u01e2"+
    "\17\30\1\0\1\30\1\0\3\30\4\0\6\30\1\0"+
    "\20\30\1\u01cc\35\30\1\u01cc\17\30\1\0\1\30\1\0"+
    "\3\30\4\0\6\30\1\0\5\30\1\u01e3\40\30\1\u01e3"+
    "\27\30\1\0\1\30\1\0\3\30\4\0\1\57\5\30"+
    "\1\0\42\30\1\57\33\30\1\0\1\30\1\0\3\30"+
    "\4\0\6\30\1\0\35\30\1\226\23\30\1\226\12\30"+
    "\20\0\1\u01e4\76\0\1\63\5\0\1\63\5\0\1\63"+
    "\1\67\4\63\1\0\4\67\3\63\2\67\1\0\1\63"+
    "\1\0\2\63\3\67\11\0\2\67\5\63\1\67\12\63"+
    "\1\67\1\63\2\67\2\63\1\67\11\63\2\u0113\1\0"+
    "\6\u0113\1\u0172\3\u0113\1\72\5\u0113\4\72\1\u0173\2\u0113"+
    "\2\72\5\u0113\3\72\11\u0113\2\72\5\u0113\1\72\12\u0113"+
    "\1\72\1\u0113\2\72\2\u0113\1\72\11\u0113\2\u0116\1\0"+
    "\7\u0116\1\242\2\u0116\1\240\5\u0116\4\240\3\u0116\2\240"+
    "\5\u0116\3\240\11\u0116\2\240\5\u0116\1\240\12\u0116\1\240"+
    "\1\u0116\2\240\2\u0116\1\240\11\u0116\1\63\5\0\1\67"+
    "\5\0\6\67\1\0\4\67\1\236\4\67\1\0\1\67"+
    "\1\0\5\67\11\0\27\67\1\u01e5\12\67\1\63\5\0"+
    "\1\67\5\0\6\67\1\0\4\67\1\236\1\u0120\3\67"+
    "\1\0\1\67\1\0\5\67\11\0\42\67\1\63\5\0"+
    "\1\67\5\0\5\67\1\u01c1\1\0\4\67\1\236\4\67"+
    "\1\0\1\67\1\0\5\67\11\0\42\67\1\63\5\0"+
    "\1\67\5\0\1\67\1\u0134\4\67\1\0\4\67\1\236"+
    "\4\67\1\0\1\67\1\0\5\67\11\0\42\67\1\63"+
    "\5\0\1\67\5\0\6\67\1\0\4\67\1\236\4\67"+
    "\1\0\1\67\1\0\5\67\11\0\25\67\1\u01e6\14\67"+
    "\1\63\5\0\1\67\5\0\6\67\1\0\4\67\1\236"+
    "\4\67\1\0\1\67\1\0\5\67\11\0\24\67\1\u01e7"+
    "\15\67\1\63\5\0\1\67\5\0\5\67\1\u01e8\1\0"+
    "\4\67\1\236\4\67\1\0\1\67\1\0\5\67\11\0"+
    "\42\67\1\63\5\0\1\67\5\0\6\67\1\0\4\67"+
    "\1\236\4\67\1\0\1\67\1\0\5\67\11\0\31\67"+
    "\1\u01e9\10\67\1\63\5\0\1\67\5\0\6\67\1\0"+
    "\4\67\1\236\1\67\1\u01ea\2\67\1\0\1\67\1\0"+
    "\5\67\11\0\42\67\1\63\5\0\1\67\5\0\6\67"+
    "\1\0\4\67\1\236\4\67\1\0\1\67\1\0\5\67"+
    "\11\0\24\67\1\u01eb\15\67\1\63\5\0\1\67\5\0"+
    "\6\67\1\0\4\67\1\236\1\67\1\u017d\2\67\1\0"+
    "\1\67\1\0\5\67\11\0\42\67\1\63\5\0\1\67"+
    "\5\0\6\67\1\0\4\67\1\236\4\67\1\0\1\67"+
    "\1\0\5\67\11\0\34\67\1\262\5\67\1\63\5\0"+
    "\1\67\5\0\6\67\1\0\4\67\1\236\4\67\1\0"+
    "\1\67\1\0\5\67\11\0\27\67\1\u01b2\12\67\1\63"+
    "\5\0\1\67\5\0\5\67\1\u01dd\1\0\4\67\1\236"+
    "\4\67\1\0\1\67\1\0\5\67\11\0\42\67\1\63"+
    "\5\0\1\67\5\0\1\67\1\u017b\4\67\1\0\4\67"+
    "\1\236\4\67\1\0\1\67\1\0\5\67\11\0\42\67"+
    "\2\30\1\0\1\30\1\0\3\30\4\0\6\30\1\0"+
    "\14\30\1\u0106\55\30\1\u0106\3\30\1\0\1\30\1\0"+
    "\3\30\4\0\6\30\1\0\35\30\1\152\23\30\1\152"+
    "\12\30\21\0\1\u01ec\75\0\1\63\5\0\1\67\5\0"+
    "\6\67\1\0\4\67\1\236\1\67\1\u01ed\2\67\1\0"+
    "\1\67\1\0\5\67\11\0\42\67\1\63\5\0\1\67"+
    "\5\0\1\67\1\u0120\4\67\1\0\4\67\1\236\4\67"+
    "\1\0\1\67\1\0\5\67\11\0\42\67\1\63\5\0"+
    "\1\67\5\0\6\67\1\0\4\67\1\236\1\67\1\u01ee"+
    "\2\67\1\0\1\67\1\0\5\67\11\0\42\67\1\63"+
    "\5\0\1\67\5\0\6\67\1\0\4\67\1\236\4\67"+
    "\1\0\1\67\1\0\5\67\11\0\24\67\1\u0151\15\67"+
    "\1\63\5\0\1\67\5\0\6\67\1\0\4\67\1\236"+
    "\4\67\1\0\1\67\1\0\5\67\11\0\27\67\1\u01ef"+
    "\12\67\1\63\5\0\1\67\5\0\5\67\1\u0194\1\0"+
    "\4\67\1\236\4\67\1\0\1\67\1\0\5\67\11\0"+
    "\42\67\1\63\5\0\1\67\5\0\6\67\1\0\4\67"+
    "\1\236\1\67\1\u017b\2\67\1\0\1\67\1\0\5\67"+
    "\11\0\42\67\22\0\1\u01f0\74\0\1\63\5\0\1\67"+
    "\5\0\3\67\1\u01f1\2\67\1\0\4\67\1\236\4\67"+
    "\1\0\1\67\1\0\5\67\11\0\42\67\1\63\5\0"+
    "\1\67\5\0\5\67\1\u0133\1\0\4\67\1\236\4\67"+
    "\1\0\1\67\1\0\5\67\11\0\42\67\1\63\5\0"+
    "\1\67\5\0\6\67\1\0\4\67\1\236\4\67\1\0"+
    "\1\67\1\0\5\67\11\0\25\67\1\u01ea\14\67\1\63"+
    "\5\0\1\67\5\0\6\67\1\0\4\67\1\236\4\67"+
    "\1\0\1\67\1\0\5\67\11\0\41\67\1\u01e8";

  private static int [] zzUnpackTrans() {
    int [] result = new int[36024];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\10\0\2\1\1\11\4\1\1\11\2\1\1\11\2\1"+
    "\2\11\2\1\1\11\2\1\1\11\5\1\1\11\16\1"+
    "\1\11\1\1\1\11\3\1\1\11\20\1\1\11\3\1"+
    "\1\11\13\1\1\11\1\1\1\0\1\1\2\11\1\0"+
    "\3\11\71\1\2\0\4\1\1\11\73\1\1\11\2\0"+
    "\1\11\57\1\1\0\10\1\1\0\33\1\1\0\35\1"+
    "\1\0\1\11\32\1\1\0\1\1\1\11\4\1\1\11"+
    "\44\1\1\0\16\1\1\0\32\1\1\0\7\1\1\0"+
    "\22\1\1\11\2\1\1\0\7\1\1\0\3\1\1\11"+
    "\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[497];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */

	/**
	 * Token type specific to HTMLTokenMaker; this signals that the user has
	 * ended a line with an unclosed HTML tag; thus a new line is beginning
	 * still inside of the tag.
	 */
	public static final int INTERNAL_INTAG					= -1;

	/**
	 * Token type specific to HTMLTokenMaker; this signals that the user has
	 * ended a line with an unclosed <code>&lt;script&gt;</code> tag.
	 */
	public static final int INTERNAL_INTAG_SCRIPT			= -2;

	/**
	 * Token type specifying we're in JavaScript.
	 */
	public static final int INTERNAL_IN_JS					= -3;

	/**
	 * Token type specifying we're in a JavaScript multiline comment.
	 */
	public static final int INTERNAL_IN_JS_MLC				= -4;


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public HTMLTokenMaker() {
		super();
	}


	/**
	 * Adds the token specified to the current linked list of tokens as an
	 * "end token;" that is, at <code>zzMarkedPos</code>.
	 *
	 * @param tokenType The token's type.
	 */
	private void addEndToken(int tokenType) {
		addToken(zzMarkedPos,zzMarkedPos, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *                    occurs.
	 */
	public void addToken(char[] array, int start, int end, int tokenType, int startOffset) {
		super.addToken(array, start,end, tokenType, startOffset);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * Returns the text to place at the beginning and end of a
	 * line to "comment" it in a this programming language.
	 *
	 * @return The start and end strings to add to a line to "comment"
	 *         it out.
	 */
	public String[] getLineCommentStartAndEnd() {
		return new String[] { "<!--", "-->" };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
			case Token.COMMENT_MULTILINE:
				state = COMMENT;
				start = text.offset;
				break;
			case Token.PREPROCESSOR:
				state = PI;
				start = text.offset;
				break;
			case Token.VARIABLE:
				state = DTD;
				start = text.offset;
				break;
			case INTERNAL_INTAG:
				state = INTAG;
				start = text.offset;
				break;
			case INTERNAL_INTAG_SCRIPT:
				state = INTAG_SCRIPT;
				start = text.offset;
				break;
			case INTERNAL_IN_JS:
				state = JAVASCRIPT;
				start = text.offset;
				break;
			case INTERNAL_IN_JS_MLC:
				state = JS_MLC;
				start = text.offset;
				break;
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new DefaultToken();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 * @exception   IOException  if any I/O-Error occurs.
	 */
	private boolean zzRefill() throws java.io.IOException {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(java.io.Reader reader) throws java.io.IOException {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public HTMLTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public HTMLTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 194) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { addToken(Token.IDENTIFIER);
          }
        case 42: break;
        case 38: 
          { addToken(Token.LITERAL_BOOLEAN);
          }
        case 43: break;
        case 3: 
          { addToken(Token.SEPARATOR); yybegin(INTAG);
          }
        case 44: break;
        case 13: 
          { addToken(Token.ERROR_CHAR);
          }
        case 45: break;
        case 31: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 46: break;
        case 16: 
          { yybegin(JAVASCRIPT); addToken(Token.SEPARATOR);
          }
        case 47: break;
        case 9: 
          { addToken(start,zzStartRead-1, Token.VARIABLE); return firstToken;
          }
        case 48: break;
        case 27: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 49: break;
        case 23: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addEndToken(INTERNAL_IN_JS_MLC); return firstToken;
          }
        case 50: break;
        case 39: 
          { addToken(Token.FUNCTION);
          }
        case 51: break;
        case 18: 
          { addEndToken(INTERNAL_IN_JS); return firstToken;
          }
        case 52: break;
        case 24: 
          { start = zzMarkedPos-2; yybegin(DTD);
          }
        case 53: break;
        case 29: 
          { addToken(Token.COMMENT_EOL); addEndToken(INTERNAL_IN_JS); return firstToken;
          }
        case 54: break;
        case 41: 
          { yybegin(YYINITIAL);
								  addToken(zzStartRead,zzStartRead, Token.SEPARATOR);
								  addToken(zzMarkedPos-8,zzMarkedPos-2, Token.RESERVED_WORD);
								  addToken(zzMarkedPos-1,zzMarkedPos-1, Token.SEPARATOR);
          }
        case 55: break;
        case 20: 
          { addToken(Token.ERROR_CHAR); addEndToken(INTERNAL_IN_JS); return firstToken;
          }
        case 56: break;
        case 17: 
          { addToken(Token.ERROR_IDENTIFIER);
          }
        case 57: break;
        case 30: 
          { start = zzMarkedPos-2; yybegin(JS_MLC);
          }
        case 58: break;
        case 10: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead, Token.VARIABLE);
          }
        case 59: break;
        case 34: 
          { yybegin(JAVASCRIPT); addToken(start,zzStartRead+1, Token.COMMENT_MULTILINE);
          }
        case 60: break;
        case 26: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+1, Token.PREPROCESSOR);
          }
        case 61: break;
        case 15: 
          { yybegin(YYINITIAL); addToken(Token.SEPARATOR);
          }
        case 62: break;
        case 28: 
          { addToken(Token.LITERAL_CHAR);
          }
        case 63: break;
        case 25: 
          { start = zzMarkedPos-2; yybegin(PI);
          }
        case 64: break;
        case 33: 
          { addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
          }
        case 65: break;
        case 4: 
          { addToken(Token.WHITESPACE);
          }
        case 66: break;
        case 5: 
          { addToken(Token.DATA_TYPE);
          }
        case 67: break;
        case 37: 
          { addToken(Token.COMMENT_MULTILINE);
          }
        case 68: break;
        case 40: 
          { addToken(zzStartRead,zzStartRead, Token.SEPARATOR);
							  addToken(zzMarkedPos-6,zzMarkedPos-1, Token.RESERVED_WORD);
							  start = zzMarkedPos; yybegin(INTAG_SCRIPT);
          }
        case 69: break;
        case 21: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 70: break;
        case 36: 
          { start = zzMarkedPos-4; yybegin(COMMENT);
          }
        case 71: break;
        case 14: 
          { addToken(Token.RESERVED_WORD);
          }
        case 72: break;
        case 35: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+2, Token.COMMENT_MULTILINE);
          }
        case 73: break;
        case 22: 
          { addToken(Token.SEPARATOR);
          }
        case 74: break;
        case 19: 
          { addToken(Token.ERROR_STRING_DOUBLE); addEndToken(INTERNAL_IN_JS); return firstToken;
          }
        case 75: break;
        case 2: 
          { addNullToken(); return firstToken;
          }
        case 76: break;
        case 7: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 77: break;
        case 11: 
          { addToken(Token.OPERATOR);
          }
        case 78: break;
        case 32: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 79: break;
        case 8: 
          { addToken(start,zzStartRead-1, Token.PREPROCESSOR); return firstToken;
          }
        case 80: break;
        case 6: 
          { 
          }
        case 81: break;
        case 12: 
          { addToken(Token.ERROR_STRING_DOUBLE);
          }
        case 82: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case INTAG_SCRIPT: {
              addToken(zzMarkedPos,zzMarkedPos, INTERNAL_INTAG_SCRIPT); return firstToken;
            }
            case 498: break;
            case JAVASCRIPT: {
              addEndToken(INTERNAL_IN_JS); return firstToken;
            }
            case 499: break;
            case INTAG: {
              addToken(zzMarkedPos,zzMarkedPos, INTERNAL_INTAG); return firstToken;
            }
            case 500: break;
            case DTD: {
              addToken(start,zzStartRead-1, Token.VARIABLE); return firstToken;
            }
            case 501: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 502: break;
            case JS_MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addEndToken(INTERNAL_IN_JS_MLC); return firstToken;
            }
            case 503: break;
            case COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 504: break;
            case PI: {
              addToken(start,zzStartRead-1, Token.PREPROCESSOR); return firstToken;
            }
            case 505: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

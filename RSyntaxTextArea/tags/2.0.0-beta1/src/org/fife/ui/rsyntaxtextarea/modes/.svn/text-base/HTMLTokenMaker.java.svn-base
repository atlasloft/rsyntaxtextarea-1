/* The following code was generated by JFlex 1.4.1 on 12/11/11 2:56 PM */

/*
 * 01/24/2005
 *
 * HTMLTokenMaker.java - Generates tokens for HTML syntax highlighting.
 * Copyright (C) 2005 Robert Futrell
 * robert_futrell at users.sourceforge.net
 * http://fifesoft.com/rsyntaxtextarea
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA.
 */
package org.fife.ui.rsyntaxtextarea.modes;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * Scanner for HTML 5 files.
 *
 * This implementation was created using
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1; however, the generated file
 * was modified for performance.  Memory allocation needs to be almost
 * completely removed to be competitive with the handwritten lexers (subclasses
 * of <code>AbstractTokenMaker</code>, so this class has been modified so that
 * Strings are never allocated (via yytext()), and the scanner never has to
 * worry about refilling its buffer (needlessly copying chars around).
 * We can achieve this because RText always scans exactly 1 line of tokens at a
 * time, and hands the scanner this line as an array of characters (a Segment
 * really).  Since tokens contain pointers to char arrays instead of Strings
 * holding their contents, there is no need for allocating new memory for
 * Strings.<p>
 *
 * The actual algorithm generated for scanning has, of course, not been
 * modified.<p>
 *
 * If you wish to regenerate this file yourself, keep in mind the following:
 * <ul>
 *   <li>The generated HTMLTokenMaker.java</code> file will contain two
 *       definitions of both <code>zzRefill</code> and <code>yyreset</code>.
 *       You should hand-delete the second of each definition (the ones
 *       generated by the lexer), as these generated methods modify the input
 *       buffer, which we'll never have to do.</li>
 *   <li>You should also change the declaration/definition of zzBuffer to NOT
 *       be initialized.  This is a needless memory allocation for us since we
 *       will be pointing the array somewhere else anyway.</li>
 *   <li>You should NOT call <code>yylex()</code> on the generated scanner
 *       directly; rather, you should use <code>getTokenList</code> as you would
 *       with any other <code>TokenMaker</code> instance.</li>
 * </ul>
 *
 * @author Robert Futrell
 * @version 0.7
 *
 */

public class HTMLTokenMaker extends AbstractMarkupTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** lexical states */
  public static final int INTAG_CHECK_TAG_NAME = 5;
  public static final int JS_MLC = 12;
  public static final int INTAG_SCRIPT = 8;
  public static final int INATTR_DOUBLE_SCRIPT = 9;
  public static final int INATTR_SINGLE_SCRIPT = 10;
  public static final int DTD = 3;
  public static final int INATTR_SINGLE = 7;
  public static final int INATTR_DOUBLE = 6;
  public static final int YYINITIAL = 0;
  public static final int INTAG = 4;
  public static final int COMMENT = 1;
  public static final int JAVASCRIPT = 11;
  public static final int PI = 2;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\2\1\0\1\1\1\36\22\0\1\4\1\54\1\27"+
    "\1\0\1\37\1\53\1\5\1\26\2\50\1\40\1\52\1\51\1\46"+
    "\1\47\1\10\1\22\3\35\3\35\1\24\2\21\1\56\1\6\1\3"+
    "\1\7\1\17\1\55\1\0\1\63\1\23\1\12\1\70\1\45\1\43"+
    "\1\72\1\76\1\14\1\77\1\73\1\42\1\67\1\65\1\64\1\15"+
    "\1\74\1\13\1\11\1\16\1\71\1\75\1\20\1\41\1\66\1\20"+
    "\1\50\1\25\1\50\1\53\1\37\1\0\1\101\1\34\1\60\1\104"+
    "\1\100\1\44\1\112\1\107\1\61\1\77\1\102\1\105\1\113\1\33"+
    "\1\103\1\62\1\74\1\31\1\57\1\32\1\30\1\111\1\106\1\114"+
    "\1\110\1\115\1\50\1\53\1\50\1\56\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\2\1\1\0\2\1\2\0\2\2\1\3\1\4"+
    "\1\5\1\6\1\1\1\7\2\1\1\10\2\1\1\11"+
    "\1\12\2\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\2\21\2\23\1\21\2\23\4\21\1\23"+
    "\4\21\1\23\2\21\1\1\1\24\1\1\1\15\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\2\14\1\2\2\14"+
    "\2\2\1\14\2\33\1\34\1\35\5\2\1\31\1\2"+
    "\1\14\1\2\1\36\1\14\14\2\1\1\1\37\1\1"+
    "\1\4\1\40\1\41\1\42\1\40\1\6\1\0\1\43"+
    "\32\21\1\23\11\21\1\23\5\21\1\23\30\21\1\44"+
    "\2\0\1\45\1\46\1\31\1\2\1\14\1\47\1\33"+
    "\1\50\1\47\1\50\1\47\1\51\1\47\1\34\1\52"+
    "\1\53\1\35\1\54\31\2\2\55\15\2\1\55\5\2"+
    "\1\56\1\57\1\0\1\40\1\60\14\21\1\23\63\21"+
    "\2\0\1\31\1\2\1\50\1\0\2\51\1\0\1\52"+
    "\1\34\1\52\3\35\32\2\1\6\31\2\1\61\1\40"+
    "\17\21\1\23\22\21\1\23\1\0\1\62\1\31\1\2"+
    "\1\0\1\52\1\34\1\53\1\52\1\35\1\63\1\54"+
    "\1\35\1\2\1\64\6\2\1\6\22\2\1\65\7\2"+
    "\1\40\11\21\1\23\12\21\1\0\1\31\1\2\1\0"+
    "\1\52\1\35\2\2\1\55\3\2\1\55\17\2\1\40"+
    "\12\21\1\0\1\31\1\2\1\0\1\52\1\35\16\2"+
    "\1\66\3\21\2\0\7\2\1\21\1\0\3\2\1\21"+
    "\1\67\1\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[569];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\116\0\234\0\352\0\u0138\0\u0186\0\u01d4\0\u0222"+
    "\0\u0270\0\u02be\0\u030c\0\u035a\0\u03a8\0\u03f6\0\u0444\0\u0492"+
    "\0\u04e0\0\u052e\0\u057c\0\u05ca\0\u0492\0\u0618\0\u0666\0\u0492"+
    "\0\u06b4\0\u0702\0\u0492\0\u0492\0\u0750\0\u079e\0\u0492\0\u07ec"+
    "\0\u0492\0\u0492\0\u0492\0\u083a\0\u0492\0\u0888\0\u08d6\0\u0924"+
    "\0\u0972\0\u09c0\0\u0a0e\0\u0a5c\0\u0aaa\0\u0af8\0\u0b46\0\u0b94"+
    "\0\u0be2\0\u0c30\0\u0c7e\0\u0ccc\0\u0d1a\0\u0d68\0\u083a\0\u0db6"+
    "\0\u0e04\0\u0e52\0\u0492\0\u0ea0\0\u0eee\0\u0492\0\u0492\0\u0492"+
    "\0\u0492\0\u0f3c\0\u0492\0\u0f8a\0\u0fd8\0\u0492\0\u1026\0\u1074"+
    "\0\u10c2\0\u1110\0\u115e\0\u11ac\0\u11fa\0\u1248\0\u1296\0\u12e4"+
    "\0\u1332\0\u1380\0\u13ce\0\u141c\0\u0492\0\u146a\0\u14b8\0\u1506"+
    "\0\u0492\0\u1554\0\u15a2\0\u15f0\0\u163e\0\u168c\0\u16da\0\u1728"+
    "\0\u1776\0\u17c4\0\u1812\0\u1860\0\u18ae\0\u18fc\0\u194a\0\u0492"+
    "\0\u1998\0\u19e6\0\u1a34\0\u1a82\0\u0492\0\u1ad0\0\u0492\0\u1b1e"+
    "\0\u0492\0\u1b6c\0\u1bba\0\u1c08\0\u1c56\0\u1ca4\0\u1cf2\0\u1d40"+
    "\0\u1d8e\0\u1ddc\0\u1e2a\0\u1e78\0\u1ec6\0\u1f14\0\u1f62\0\u1fb0"+
    "\0\u1ffe\0\u204c\0\u209a\0\u20e8\0\u2136\0\u2184\0\u21d2\0\u2220"+
    "\0\u226e\0\u22bc\0\u230a\0\u2358\0\u23a6\0\u23f4\0\u2442\0\u2490"+
    "\0\u24de\0\u252c\0\u257a\0\u25c8\0\u2616\0\u2664\0\u26b2\0\u2700"+
    "\0\u274e\0\u279c\0\u27ea\0\u2838\0\u2886\0\u28d4\0\u2922\0\u2970"+
    "\0\u29be\0\u2a0c\0\u2a5a\0\u2aa8\0\u2af6\0\u2b44\0\u2b92\0\u2be0"+
    "\0\u2c2e\0\u2c7c\0\u2cca\0\u2d18\0\u2d66\0\u2db4\0\u2e02\0\u2e50"+
    "\0\u2e9e\0\u2eec\0\u2f3a\0\u2f88\0\u0492\0\u1026\0\u2fd6\0\u3024"+
    "\0\u3072\0\u30c0\0\u310e\0\u315c\0\u31aa\0\u31aa\0\u31aa\0\u31f8"+
    "\0\u3246\0\u3294\0\u32e2\0\u3330\0\u337e\0\u33cc\0\u0492\0\u341a"+
    "\0\u0492\0\u3468\0\u34b6\0\u3504\0\u3552\0\u35a0\0\u35ee\0\u363c"+
    "\0\u368a\0\u36d8\0\u3726\0\u3774\0\u37c2\0\u3810\0\u385e\0\u38ac"+
    "\0\u38fa\0\u3948\0\u3996\0\u39e4\0\u3a32\0\u3a80\0\u3ace\0\u3b1c"+
    "\0\u3b6a\0\u3bb8\0\u3c06\0\u10c2\0\u3c54\0\u3ca2\0\u3cf0\0\u3d3e"+
    "\0\u3d8c\0\u3dda\0\u3e28\0\u3e76\0\u3ec4\0\u3f12\0\u3f60\0\u3fae"+
    "\0\u3ffc\0\u404a\0\u4098\0\u40e6\0\u4134\0\u4182\0\u41d0\0\u0492"+
    "\0\u19e6\0\u421e\0\u426c\0\u0492\0\u42ba\0\u4308\0\u4356\0\u43a4"+
    "\0\u43f2\0\u4440\0\u448e\0\u44dc\0\u452a\0\u4578\0\u45c6\0\u4614"+
    "\0\u4662\0\u46b0\0\u46fe\0\u474c\0\u479a\0\u47e8\0\u4836\0\u4884"+
    "\0\u48d2\0\u4920\0\u496e\0\u49bc\0\u4a0a\0\u2664\0\u4a58\0\u4aa6"+
    "\0\u4af4\0\u4b42\0\u4b90\0\u4bde\0\u4c2c\0\u4c7a\0\u4cc8\0\u4d16"+
    "\0\u4d64\0\u4db2\0\u4e00\0\u4e4e\0\u4e9c\0\u4eea\0\u4f38\0\u4f86"+
    "\0\u4fd4\0\u5022\0\u5070\0\u50be\0\u510c\0\u515a\0\u51a8\0\u51f6"+
    "\0\u5244\0\u5292\0\u52e0\0\u532e\0\u537c\0\u53ca\0\u5418\0\u5466"+
    "\0\u54b4\0\u5502\0\u0aaa\0\u5550\0\u559e\0\u55ec\0\u563a\0\u5688"+
    "\0\u56d6\0\u5724\0\u31aa\0\u5772\0\u57c0\0\u580e\0\u585c\0\u58aa"+
    "\0\u58f8\0\u5946\0\u5994\0\u59e2\0\u5a30\0\u5a7e\0\u5acc\0\u5b1a"+
    "\0\u5b68\0\u5bb6\0\u5c04\0\u5c52\0\u5ca0\0\u5cee\0\u5d3c\0\u5d8a"+
    "\0\u5dd8\0\u5e26\0\u5e74\0\u5ec2\0\u5f10\0\u5f5e\0\u5fac\0\u5ffa"+
    "\0\u6048\0\u6096\0\u60e4\0\u6132\0\u6180\0\u61ce\0\u621c\0\u626a"+
    "\0\u62b8\0\u6306\0\u6354\0\u63a2\0\u63f0\0\u643e\0\u648c\0\u64da"+
    "\0\u6528\0\u6576\0\u65c4\0\u6612\0\u6660\0\u66ae\0\u66fc\0\u674a"+
    "\0\u6798\0\u67e6\0\u6834\0\u6882\0\u68d0\0\u691e\0\u696c\0\u0492"+
    "\0\u69ba\0\u6a08\0\u6a56\0\u6aa4\0\u6af2\0\u6b40\0\u6b8e\0\u6bdc"+
    "\0\u6c2a\0\u6c78\0\u6cc6\0\u6d14\0\u6d62\0\u6db0\0\u6dfe\0\u6e4c"+
    "\0\u6e9a\0\u6ee8\0\u6f36\0\u2838\0\u6f84\0\u6fd2\0\u7020\0\u706e"+
    "\0\u70bc\0\u710a\0\u7158\0\u71a6\0\u71f4\0\u7242\0\u7290\0\u72de"+
    "\0\u732c\0\u737a\0\u73c8\0\u4db2\0\u7416\0\u0492\0\u7464\0\u74b2"+
    "\0\u7500\0\u754e\0\u0492\0\u580e\0\u759c\0\u75ea\0\u0492\0\u58f8"+
    "\0\u7638\0\u7686\0\u10c2\0\u76d4\0\u7722\0\u7770\0\u77be\0\u780c"+
    "\0\u785a\0\u10c2\0\u78a8\0\u78f6\0\u7944\0\u7992\0\u79e0\0\u7a2e"+
    "\0\u7a7c\0\u7aca\0\u7b18\0\u7b66\0\u7bb4\0\u7c02\0\u7c50\0\u7c9e"+
    "\0\u7cec\0\u7d3a\0\u7d88\0\u7dd6\0\u10c2\0\u7e24\0\u7e72\0\u7ec0"+
    "\0\u7f0e\0\u7f5c\0\u7faa\0\u7ff8\0\u8046\0\u8094\0\u80e2\0\u8130"+
    "\0\u817e\0\u81cc\0\u821a\0\u8268\0\u82b6\0\u8304\0\u8352\0\u8352"+
    "\0\u83a0\0\u83ee\0\u843c\0\u848a\0\u84d8\0\u8526\0\u8574\0\u85c2"+
    "\0\u8610\0\u865e\0\u86ac\0\u86fa\0\u8748\0\u8796\0\u87e4\0\u8832"+
    "\0\u8880\0\u5b68\0\u88ce\0\u891c\0\u896a\0\u89b8\0\u8a06\0\u8a54"+
    "\0\u8aa2\0\u8af0\0\u8b3e\0\u8b8c\0\u8bda\0\u8c28\0\u8c76\0\u8cc4"+
    "\0\u8d12\0\u8d60\0\u8dae\0\u8dfc\0\u8e4a\0\u8e98\0\u8ee6\0\u8f34"+
    "\0\u8f82\0\u8fd0\0\u901e\0\u906c\0\u90ba\0\u9108\0\u9156\0\u91a4"+
    "\0\u91f2\0\u9240\0\u928e\0\u92dc\0\u932a\0\u9378\0\u93c6\0\u9414"+
    "\0\u9462\0\u94b0\0\u94fe\0\u954c\0\u959a\0\u95e8\0\u9636\0\u9684"+
    "\0\u96d2\0\u9720\0\u976e\0\u97bc\0\u1a34\0\u980a\0\u9858\0\u98a6"+
    "\0\u98f4\0\u9942\0\u9990\0\u99de\0\u9a2c\0\u9a7a\0\u9ac8\0\u9b16"+
    "\0\u9b64\0\u9bb2\0\u9c00\0\u9c4e\0\u9c9c\0\u9cea\0\u9d38\0\u0492"+
    "\0\u9d86";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[569];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\16\1\17\1\20\1\21\1\22\1\23\110\16\2\24"+
    "\1\25\43\24\1\26\47\24\2\27\1\30\52\27\1\31"+
    "\40\27\2\32\1\33\14\32\1\34\76\32\1\35\1\36"+
    "\1\0\1\35\1\22\2\35\1\37\1\40\6\35\1\41"+
    "\6\35\1\42\1\43\66\35\2\44\1\0\1\44\1\45"+
    "\2\44\2\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\45\3\44\1\54\2\44\2\45\1\55\1\50\1\53"+
    "\1\56\1\54\5\44\1\57\2\60\1\61\11\44\1\46"+
    "\1\47\1\51\1\52\1\62\1\63\1\56\1\44\1\64"+
    "\1\65\1\55\1\44\1\66\1\67\1\70\1\71\1\44"+
    "\1\61\1\62\1\66\1\63\1\65\1\57\1\44\1\71"+
    "\1\44\1\70\1\44\1\64\2\44\27\72\1\73\66\72"+
    "\26\74\1\73\67\74\1\35\1\36\1\0\1\35\1\22"+
    "\2\35\1\37\1\75\6\35\1\76\6\35\1\77\1\100"+
    "\66\35\27\72\1\101\66\72\26\74\1\101\67\74\1\102"+
    "\1\22\1\103\1\104\1\22\1\105\1\106\1\107\1\110"+
    "\3\111\1\112\2\111\1\113\1\111\1\114\1\115\1\111"+
    "\1\114\1\102\1\116\1\117\1\120\1\121\1\122\1\123"+
    "\1\124\1\114\1\125\1\111\1\107\3\111\1\126\1\111"+
    "\1\127\1\130\1\131\1\106\1\132\2\107\2\37\1\133"+
    "\1\134\1\135\1\136\2\111\1\137\12\111\1\140\1\141"+
    "\2\111\1\142\1\143\1\144\2\111\1\145\1\146\3\111"+
    "\2\147\1\150\35\147\1\151\55\147\2\16\4\0\111\16"+
    "\1\17\2\0\1\22\1\0\110\16\126\0\1\152\6\153"+
    "\1\0\5\153\3\0\6\153\3\0\5\153\6\0\1\154"+
    "\1\155\1\0\1\156\36\153\1\0\1\22\2\0\1\22"+
    "\111\0\4\23\1\0\1\23\1\157\107\23\2\24\1\0"+
    "\43\24\1\0\47\24\46\0\1\160\47\0\2\27\1\0"+
    "\52\27\1\0\40\27\17\0\1\161\76\0\2\32\1\0"+
    "\14\32\1\0\76\32\2\35\1\0\1\35\1\0\2\35"+
    "\2\0\6\35\1\0\6\35\2\0\67\35\1\36\1\0"+
    "\1\35\1\22\2\35\2\0\6\35\1\0\6\35\2\0"+
    "\66\35\17\0\1\41\76\0\2\44\1\0\1\44\1\0"+
    "\2\44\2\0\6\44\1\0\6\44\2\0\70\44\1\0"+
    "\1\44\1\0\2\44\2\0\1\44\1\162\2\44\1\163"+
    "\1\164\1\0\6\44\2\0\1\165\1\44\1\164\12\44"+
    "\1\166\12\44\1\162\1\44\1\163\1\167\1\170\2\44"+
    "\1\171\1\44\1\165\6\44\1\166\1\167\1\44\1\170"+
    "\7\44\1\171\4\44\1\0\1\44\1\0\2\44\2\0"+
    "\3\44\1\172\2\44\1\0\6\44\2\0\15\44\1\173"+
    "\13\44\1\172\1\44\1\174\1\175\13\44\1\173\1\174"+
    "\1\44\1\175\14\44\1\0\1\44\1\0\2\44\2\0"+
    "\6\44\1\0\6\44\2\0\1\176\40\44\1\176\26\44"+
    "\1\0\1\44\1\0\2\44\2\0\1\177\5\44\1\0"+
    "\6\44\2\0\3\44\1\200\6\44\1\201\2\202\12\44"+
    "\1\177\5\44\1\200\1\44\1\203\15\44\1\201\5\44"+
    "\1\203\4\44\1\0\1\44\1\0\2\44\2\0\2\44"+
    "\1\204\3\44\1\0\6\44\2\0\1\44\1\204\10\44"+
    "\1\205\20\44\1\206\15\44\1\206\3\44\1\205\12\44"+
    "\1\0\1\44\1\0\2\44\2\0\2\44\1\67\1\207"+
    "\1\44\1\67\1\0\3\44\1\210\2\44\2\0\1\44"+
    "\2\67\1\44\1\210\6\44\2\211\1\212\13\44\1\207"+
    "\1\44\1\213\4\44\1\67\5\44\1\214\1\44\1\212"+
    "\1\213\2\44\1\67\2\44\1\214\10\44\1\0\1\44"+
    "\1\0\2\44\2\0\2\44\1\67\1\203\2\44\1\0"+
    "\6\44\2\0\1\215\1\67\10\44\1\216\16\44\1\203"+
    "\1\44\1\217\1\220\3\44\1\221\1\215\1\222\6\44"+
    "\1\217\1\44\1\220\1\221\1\216\4\44\1\222\5\44"+
    "\1\0\1\44\1\0\2\44\2\0\6\44\1\0\6\44"+
    "\2\0\12\44\1\67\42\44\1\67\12\44\1\0\1\44"+
    "\1\0\2\44\2\0\6\44\1\0\6\44\2\0\15\44"+
    "\1\223\15\44\1\224\1\225\13\44\1\223\1\224\1\44"+
    "\1\225\14\44\1\0\1\44\1\0\2\44\2\0\3\44"+
    "\1\226\2\44\1\0\6\44\2\0\15\44\1\227\13\44"+
    "\1\226\1\44\1\230\14\44\1\227\1\230\16\44\1\0"+
    "\1\44\1\0\2\44\2\0\2\44\1\231\1\232\2\44"+
    "\1\0\6\44\2\0\1\44\1\231\27\44\1\232\2\44"+
    "\1\233\16\44\1\233\14\44\1\0\1\44\1\0\2\44"+
    "\2\0\6\44\1\0\6\44\2\0\37\44\1\234\5\44"+
    "\1\235\13\44\1\235\1\44\1\234\4\44\1\0\1\44"+
    "\1\0\2\44\2\0\1\236\1\237\1\240\1\44\1\241"+
    "\1\44\1\0\3\44\1\242\2\44\2\0\1\243\1\240"+
    "\2\44\1\242\22\44\1\236\1\237\1\44\1\241\5\44"+
    "\1\244\1\243\12\44\1\244\13\44\1\0\1\44\1\0"+
    "\2\44\2\0\4\44\1\245\1\44\1\0\3\44\1\246"+
    "\2\44\2\0\1\247\3\44\1\246\5\44\1\67\17\44"+
    "\1\245\6\44\1\247\13\44\1\67\12\44\1\0\1\44"+
    "\1\0\2\44\2\0\6\44\1\0\6\44\2\0\1\250"+
    "\14\44\1\251\15\44\1\252\5\44\1\250\6\44\1\251"+
    "\1\252\16\44\1\0\1\44\1\0\2\44\2\0\3\44"+
    "\1\253\1\44\1\67\1\0\6\44\2\0\2\44\1\67"+
    "\7\44\1\67\2\254\1\255\13\44\1\253\1\44\1\256"+
    "\4\44\1\67\7\44\1\255\1\256\2\44\2\67\12\44"+
    "\1\0\1\44\1\0\2\44\2\0\6\44\1\0\3\44"+
    "\1\257\2\44\2\0\4\44\1\257\10\44\1\260\32\44"+
    "\1\260\17\44\1\0\1\44\1\0\2\44\2\0\3\44"+
    "\1\261\2\44\1\0\6\44\2\0\31\44\1\261\1\44"+
    "\1\262\15\44\1\262\16\44\1\0\1\44\1\0\2\44"+
    "\2\0\2\44\1\67\2\44\1\263\1\0\6\44\2\0"+
    "\1\44\1\67\1\263\2\44\1\67\7\44\1\264\32\44"+
    "\1\264\15\44\27\72\1\0\66\72\26\74\1\0\67\74"+
    "\17\0\1\265\76\0\1\102\10\0\6\102\1\0\6\102"+
    "\2\0\6\102\1\0\1\102\1\0\5\102\11\0\37\102"+
    "\3\0\1\266\3\0\1\37\1\267\112\0\1\37\1\0"+
    "\1\37\115\0\1\37\115\0\1\37\1\270\27\0\1\271"+
    "\55\0\1\102\10\0\6\111\1\0\5\111\1\272\2\0"+
    "\6\111\1\0\1\111\1\0\5\111\11\0\37\111\1\102"+
    "\10\0\6\111\1\0\5\111\1\272\2\0\3\111\1\273"+
    "\2\111\1\0\1\111\1\0\5\111\11\0\37\111\7\0"+
    "\1\37\7\0\1\274\76\0\1\275\10\0\6\275\1\0"+
    "\1\275\2\114\1\275\1\114\1\275\2\0\5\275\1\114"+
    "\1\0\1\275\1\0\1\275\1\276\2\277\1\300\1\0"+
    "\1\301\7\0\11\275\1\277\7\275\1\300\3\275\1\277"+
    "\1\276\11\275\10\0\6\275\1\0\1\275\1\302\1\303"+
    "\1\275\1\303\1\275\2\0\5\275\1\303\1\0\1\275"+
    "\1\0\1\304\1\276\2\277\1\300\1\0\1\301\7\0"+
    "\11\275\1\277\7\275\1\300\3\275\1\277\1\276\6\275"+
    "\1\304\1\275\2\116\1\305\22\116\1\306\1\307\67\116"+
    "\2\117\1\0\22\117\1\310\1\117\1\311\66\117\1\102"+
    "\10\0\6\111\1\0\5\111\1\272\2\0\3\111\1\312"+
    "\2\111\1\0\1\111\1\0\5\111\11\0\37\111\1\102"+
    "\10\0\6\111\1\0\5\111\1\272\2\0\6\111\1\0"+
    "\1\111\1\0\5\111\11\0\21\111\1\313\15\111\1\102"+
    "\10\0\6\111\1\0\5\111\1\272\2\0\1\111\1\314"+
    "\4\111\1\0\1\111\1\0\5\111\11\0\30\111\1\315"+
    "\1\316\5\111\1\102\10\0\6\111\1\0\5\111\1\272"+
    "\2\0\1\317\5\111\1\0\1\111\1\0\5\111\11\0"+
    "\21\111\1\320\1\321\14\111\1\102\10\0\6\111\1\0"+
    "\5\111\1\272\2\0\1\111\1\322\4\111\1\0\1\111"+
    "\1\0\5\111\11\0\24\111\1\323\4\111\1\324\5\111"+
    "\1\102\10\0\6\111\1\0\5\111\1\272\2\0\1\325"+
    "\5\111\1\0\1\111\1\0\5\111\11\0\2\111\1\326"+
    "\17\111\1\327\1\111\1\330\1\111\1\331\10\111\7\0"+
    "\1\37\36\0\1\37\70\0\2\301\1\0\1\301\10\0"+
    "\1\301\67\0\1\37\42\0\1\37\43\0\1\102\10\0"+
    "\6\111\1\0\5\111\1\272\2\0\1\332\1\111\1\333"+
    "\3\111\1\0\1\111\1\0\5\111\11\0\27\111\1\334"+
    "\1\335\1\336\5\111\1\102\10\0\6\111\1\0\5\111"+
    "\1\272\2\0\6\111\1\0\1\111\1\0\5\111\11\0"+
    "\22\111\1\337\1\111\1\340\1\111\1\341\1\111\1\342"+
    "\6\111\1\102\10\0\6\111\1\0\5\111\1\272\2\0"+
    "\3\111\1\343\2\111\1\0\1\111\1\0\3\111\1\344"+
    "\1\111\11\0\1\345\33\111\1\346\2\111\1\102\10\0"+
    "\6\111\1\0\5\111\1\272\2\0\1\347\1\350\4\111"+
    "\1\0\1\111\1\0\5\111\11\0\22\111\1\351\14\111"+
    "\1\102\10\0\6\111\1\0\5\111\1\272\2\0\6\111"+
    "\1\0\1\111\1\0\5\111\11\0\22\111\1\352\14\111"+
    "\1\102\10\0\6\111\1\0\5\111\1\272\2\0\3\111"+
    "\1\353\2\111\1\0\1\111\1\0\5\111\11\0\1\354"+
    "\25\111\1\355\3\111\1\356\2\111\1\357\1\111\1\102"+
    "\10\0\6\111\1\0\5\111\1\272\2\0\4\111\1\360"+
    "\1\111\1\0\1\111\1\0\5\111\11\0\37\111\1\102"+
    "\10\0\6\111\1\0\5\111\1\272\2\0\6\111\1\0"+
    "\1\111\1\0\5\111\11\0\21\111\1\361\2\111\1\362"+
    "\12\111\1\102\10\0\6\111\1\0\5\111\1\272\2\0"+
    "\6\111\1\0\1\111\1\0\5\111\11\0\24\111\1\363"+
    "\12\111\1\102\10\0\6\111\1\0\5\111\1\272\2\0"+
    "\6\111\1\0\1\111\1\0\5\111\11\0\2\111\1\364"+
    "\25\111\1\365\6\111\1\102\10\0\6\111\1\0\5\111"+
    "\1\272\2\0\6\111\1\0\1\111\1\0\5\111\11\0"+
    "\22\111\1\330\1\111\1\366\12\111\1\102\10\0\6\111"+
    "\1\0\5\111\1\272\2\0\6\111\1\0\1\111\1\0"+
    "\5\111\11\0\24\111\1\367\12\111\2\147\1\0\35\147"+
    "\1\0\55\147\10\0\1\370\116\0\6\371\1\0\5\371"+
    "\3\0\6\371\3\0\5\371\11\0\37\371\11\0\6\153"+
    "\1\0\5\153\3\0\6\153\3\0\5\153\11\0\37\153"+
    "\46\0\1\372\60\0\6\153\1\0\5\153\3\0\6\153"+
    "\3\0\5\153\11\0\1\153\1\373\35\153\17\0\1\374"+
    "\76\0\2\44\1\0\1\44\1\0\2\44\2\0\2\44"+
    "\1\375\3\44\1\0\6\44\2\0\1\44\1\375\66\44"+
    "\1\0\1\44\1\0\2\44\2\0\6\44\1\0\6\44"+
    "\2\0\33\44\1\376\15\44\1\376\16\44\1\0\1\44"+
    "\1\0\2\44\2\0\2\44\1\377\3\44\1\0\6\44"+
    "\2\0\1\44\1\377\34\44\1\176\21\44\1\176\7\44"+
    "\1\0\1\44\1\0\2\44\2\0\4\44\1\67\1\44"+
    "\1\0\3\44\1\67\2\44\2\0\4\44\1\67\25\44"+
    "\1\67\35\44\1\0\1\44\1\0\2\44\2\0\1\44"+
    "\1\u0100\1\u0101\3\44\1\0\6\44\2\0\1\44\1\u0101"+
    "\10\44\1\u0102\15\44\1\u0100\24\44\1\u0102\12\44\1\0"+
    "\1\44\1\0\2\44\2\0\6\44\1\0\6\44\2\0"+
    "\37\44\1\u0103\23\44\1\u0103\4\44\1\0\1\44\1\0"+
    "\2\44\2\0\6\44\1\0\6\44\2\0\1\u0104\40\44"+
    "\1\u0104\26\44\1\0\1\44\1\0\2\44\2\0\6\44"+
    "\1\0\6\44\2\0\33\44\1\u0105\15\44\1\u0105\16\44"+
    "\1\0\1\44\1\0\2\44\2\0\5\44\1\u0106\1\0"+
    "\6\44\2\0\2\44\1\u0106\65\44\1\0\1\44\1\0"+
    "\2\44\2\0\6\44\1\0\6\44\2\0\3\44\1\u0107"+
    "\31\44\1\u0107\32\44\1\0\1\44\1\0\2\44\2\0"+
    "\4\44\1\u0100\1\44\1\0\6\44\2\0\3\44\1\u0108"+
    "\26\44\1\u0100\2\44\1\u0108\32\44\1\0\1\44\1\0"+
    "\2\44\2\0\6\44\1\0\6\44\2\0\12\44\1\u0109"+
    "\24\44\1\u010a\1\u0106\13\44\1\u0106\1\u0109\5\44\1\u010a"+
    "\4\44\1\0\1\44\1\0\2\44\2\0\6\44\1\0"+
    "\6\44\2\0\12\44\1\u0106\42\44\1\u0106\12\44\1\0"+
    "\1\44\1\0\2\44\2\0\3\44\1\u010b\2\44\1\0"+
    "\6\44\2\0\31\44\1\u010b\36\44\1\0\1\44\1\0"+
    "\2\44\2\0\1\67\3\44\1\u010c\1\44\1\0\6\44"+
    "\2\0\27\44\1\67\2\44\1\u010c\35\44\1\0\1\44"+
    "\1\0\2\44\2\0\6\44\1\0\6\44\2\0\33\44"+
    "\1\u010d\15\44\1\u010d\16\44\1\0\1\44\1\0\2\44"+
    "\2\0\2\44\1\u010e\3\44\1\0\6\44\2\0\1\44"+
    "\1\u010e\66\44\1\0\1\44\1\0\2\44\2\0\6\44"+
    "\1\0\6\44\2\0\42\44\1\67\17\44\1\67\5\44"+
    "\1\0\1\44\1\0\2\44\2\0\6\44\1\0\6\44"+
    "\2\0\15\44\1\67\16\44\1\u010f\13\44\1\67\2\44"+
    "\1\u010f\14\44\1\0\1\44\1\0\2\44\2\0\6\44"+
    "\1\0\6\44\2\0\33\44\1\u0110\15\44\1\u0110\16\44"+
    "\1\0\1\44\1\0\2\44\2\0\2\44\1\u0111\3\44"+
    "\1\0\6\44\2\0\1\44\1\u0111\66\44\1\0\1\44"+
    "\1\0\2\44\2\0\5\44\1\176\1\0\6\44\2\0"+
    "\2\44\1\176\34\44\1\u0106\23\44\1\u0106\4\44\1\0"+
    "\1\44\1\0\2\44\2\0\6\44\1\0\6\44\2\0"+
    "\34\44\1\220\16\44\1\220\14\44\1\0\1\44\1\0"+
    "\2\44\2\0\6\44\1\0\6\44\2\0\34\44\1\u0112"+
    "\16\44\1\u0112\14\44\1\0\1\44\1\0\2\44\2\0"+
    "\6\44\1\0\6\44\2\0\11\44\1\u0113\52\44\1\u0113"+
    "\3\44\1\0\1\44\1\0\2\44\2\0\6\44\1\0"+
    "\3\44\1\176\2\44\2\0\4\44\1\176\63\44\1\0"+
    "\1\44\1\0\2\44\2\0\6\44\1\0\6\44\2\0"+
    "\15\44\1\u0114\32\44\1\u0114\17\44\1\0\1\44\1\0"+
    "\2\44\2\0\5\44\1\u0115\1\0\6\44\2\0\2\44"+
    "\1\u0115\65\44\1\0\1\44\1\0\2\44\2\0\3\44"+
    "\1\u0116\2\44\1\0\6\44\2\0\31\44\1\u0116\2\44"+
    "\1\u0117\16\44\1\u0117\14\44\1\0\1\44\1\0\2\44"+
    "\2\0\1\u0118\5\44\1\0\6\44\2\0\27\44\1\u0118"+
    "\40\44\1\0\1\44\1\0\2\44\2\0\6\44\1\0"+
    "\6\44\2\0\40\44\1\u0119\13\44\1\u0119\13\44\1\0"+
    "\1\44\1\0\2\44\2\0\6\44\1\0\6\44\2\0"+
    "\34\44\1\67\16\44\1\67\14\44\1\0\1\44\1\0"+
    "\2\44\2\0\1\u011a\5\44\1\0\6\44\2\0\27\44"+
    "\1\u011a\40\44\1\0\1\44\1\0\2\44\2\0\1\u011b"+
    "\5\44\1\0\6\44\2\0\27\44\1\u011b\40\44\1\0"+
    "\1\44\1\0\2\44\2\0\6\44\1\0\6\44\2\0"+
    "\45\44\1\67\13\44\1\67\6\44\1\0\1\44\1\0"+
    "\2\44\2\0\1\u011c\5\44\1\0\3\44\1\262\2\44"+
    "\2\0\4\44\1\262\5\44\1\201\2\u011d\1\u011e\11\44"+
    "\1\u011c\20\44\1\u011e\4\44\1\201\12\44\1\0\1\44"+
    "\1\0\2\44\2\0\6\44\1\0\6\44\2\0\3\44"+
    "\1\u011f\31\44\1\u011f\32\44\1\0\1\44\1\0\2\44"+
    "\2\0\6\44\1\0\6\44\2\0\42\44\1\u0120\17\44"+
    "\1\u0120\5\44\1\0\1\44\1\0\2\44\2\0\6\44"+
    "\1\0\3\44\1\u0121\2\44\2\0\4\44\1\u0121\31\44"+
    "\1\u0122\21\44\1\u0122\7\44\1\0\1\44\1\0\2\44"+
    "\2\0\6\44\1\0\6\44\2\0\33\44\1\u0123\15\44"+
    "\1\u0123\16\44\1\0\1\44\1\0\2\44\2\0\6\44"+
    "\1\0\6\44\2\0\15\44\1\u0124\24\44\1\u0125\5\44"+
    "\1\u0124\11\44\1\u0125\5\44\1\0\1\44\1\0\2\44"+
    "\2\0\2\44\1\u0126\3\44\1\0\6\44\2\0\1\44"+
    "\1\u0126\1\44\1\u011b\30\44\1\u0107\1\u011b\15\44\1\u0107"+
    "\14\44\1\0\1\44\1\0\2\44\2\0\6\44\1\0"+
    "\3\44\1\u0127\2\44\2\0\4\44\1\u0127\63\44\1\0"+
    "\1\44\1\0\2\44\2\0\6\44\1\0\6\44\2\0"+
    "\15\44\1\u0128\32\44\1\u0128\17\44\1\0\1\44\1\0"+
    "\2\44\2\0\3\44\1\u0129\2\44\1\0\6\44\2\0"+
    "\31\44\1\u0129\36\44\1\0\1\44\1\0\2\44\2\0"+
    "\2\44\1\u012a\3\44\1\0\6\44\2\0\1\44\1\u012a"+
    "\66\44\1\0\1\44\1\0\2\44\2\0\5\44\1\u012b"+
    "\1\0\6\44\2\0\2\44\1\u012b\12\44\1\u012c\32\44"+
    "\1\u012c\17\44\1\0\1\44\1\0\2\44\2\0\4\44"+
    "\1\u012d\1\44\1\0\6\44\2\0\32\44\1\u012d\35\44"+
    "\1\0\1\44\1\0\2\44\2\0\6\44\1\0\3\44"+
    "\1\262\2\44\2\0\4\44\1\262\63\44\1\0\1\44"+
    "\1\0\2\44\2\0\6\44\1\0\6\44\2\0\40\44"+
    "\1\u012e\13\44\1\u012e\13\44\1\0\1\44\1\0\2\44"+
    "\2\0\6\44\1\0\6\44\2\0\40\44\1\u012f\13\44"+
    "\1\u012f\13\44\1\0\1\44\1\0\2\44\2\0\5\44"+
    "\1\u0130\1\0\6\44\2\0\2\44\1\u0130\65\44\1\0"+
    "\1\44\1\0\2\44\2\0\6\44\1\0\6\44\2\0"+
    "\47\44\1\u0102\20\44\1\0\1\44\1\0\2\44\2\0"+
    "\5\44\1\u0131\1\0\6\44\2\0\2\44\1\u0131\65\44"+
    "\1\0\1\44\1\0\2\44\2\0\6\44\1\0\6\44"+
    "\2\0\12\44\1\u0132\42\44\1\u0132\12\44\1\0\1\44"+
    "\1\0\2\44\2\0\5\44\1\u0133\1\0\6\44\2\0"+
    "\2\44\1\u0133\1\u0134\31\44\1\u0134\32\44\1\0\1\44"+
    "\1\0\2\44\2\0\2\44\1\u0135\1\44\1\67\1\44"+
    "\1\0\6\44\2\0\1\44\1\u0135\30\44\1\67\35\44"+
    "\1\0\1\44\1\0\2\44\2\0\2\44\1\67\3\44"+
    "\1\0\6\44\2\0\1\44\1\67\31\44\1\u0136\11\44"+
    "\1\67\3\44\1\u0136\7\44\1\67\6\44\1\0\1\44"+
    "\1\0\2\44\2\0\6\44\1\0\6\44\2\0\3\44"+
    "\1\67\31\44\1\67\32\44\1\0\1\44\1\0\2\44"+
    "\2\0\5\44\1\u0137\1\0\6\44\2\0\2\44\1\u0137"+
    "\7\44\1\67\42\44\1\67\12\44\1\0\1\44\1\0"+
    "\2\44\2\0\5\44\1\u0138\1\0\6\44\2\0\2\44"+
    "\1\u0138\65\44\1\0\1\44\1\0\2\44\2\0\6\44"+
    "\1\0\6\44\2\0\40\44\1\67\13\44\1\67\13\44"+
    "\1\0\1\44\1\0\2\44\2\0\6\44\1\0\6\44"+
    "\2\0\36\44\1\u0139\21\44\1\u0139\7\44\1\0\1\44"+
    "\1\0\2\44\2\0\6\44\1\0\6\44\2\0\40\44"+
    "\1\u013a\13\44\1\u013a\13\44\1\0\1\44\1\0\2\44"+
    "\2\0\2\44\1\67\3\44\1\0\6\44\2\0\1\44"+
    "\1\67\66\44\1\0\1\44\1\0\2\44\2\0\6\44"+
    "\1\0\6\44\2\0\37\44\1\u013b\23\44\1\u013b\4\44"+
    "\1\0\1\44\1\0\2\44\2\0\6\44\1\0\6\44"+
    "\2\0\33\44\1\u013c\15\44\1\u013c\14\44\11\0\1\u013d"+
    "\45\0\1\u013d\36\0\2\270\1\0\113\270\40\0\1\u013e"+
    "\55\0\1\102\10\0\6\102\1\0\6\102\2\0\1\u013f"+
    "\5\102\1\0\1\102\1\0\5\102\11\0\40\102\10\0"+
    "\6\111\1\0\5\111\1\272\2\0\6\111\1\0\1\111"+
    "\1\0\3\111\1\u0140\1\111\11\0\37\111\7\0\1\37"+
    "\7\0\1\107\76\0\1\275\10\0\6\275\1\0\6\275"+
    "\2\0\6\275\1\0\1\275\1\0\5\275\11\0\40\275"+
    "\10\0\6\275\1\0\1\275\2\u0141\1\275\1\u0141\1\275"+
    "\2\0\5\275\1\u0141\1\0\1\275\1\0\5\275\1\u0142"+
    "\3\0\1\u0142\4\0\40\275\10\0\6\275\1\0\1\275"+
    "\2\301\1\275\1\301\1\275\2\0\5\275\1\301\1\0"+
    "\1\275\1\0\2\275\2\277\1\300\11\0\11\275\1\277"+
    "\7\275\1\300\3\275\1\277\12\275\10\0\6\275\1\0"+
    "\1\275\2\302\1\275\1\302\1\275\2\0\5\275\1\302"+
    "\1\0\1\275\1\0\2\275\2\277\1\300\1\0\1\301"+
    "\7\0\11\275\1\277\7\275\1\300\3\275\1\277\12\275"+
    "\10\0\6\275\1\0\1\275\1\302\1\303\1\275\1\303"+
    "\1\275\2\0\5\275\1\303\1\0\1\275\1\0\1\275"+
    "\1\u0143\2\277\1\300\1\0\1\301\7\0\11\275\1\277"+
    "\7\275\1\300\3\275\1\277\1\u0143\11\275\10\0\1\275"+
    "\1\u0144\4\275\1\0\1\275\4\u0144\1\275\2\0\4\275"+
    "\2\u0144\1\0\1\275\1\0\2\275\3\u0144\11\0\1\275"+
    "\1\u0144\2\275\1\u0144\4\275\1\u0144\7\275\2\u0144\2\275"+
    "\1\u0144\11\275\25\305\1\u0145\1\307\67\305\2\u0146\1\0"+
    "\17\u0146\1\116\1\u0146\1\116\1\u0147\2\116\1\u0148\5\116"+
    "\6\u0146\1\116\51\u0146\2\u0149\1\0\17\u0149\1\117\1\u0149"+
    "\1\117\1\u014a\2\117\1\u014b\5\117\6\u0149\1\117\51\u0149"+
    "\1\102\10\0\6\111\1\0\5\111\1\272\2\0\6\111"+
    "\1\0\1\111\1\0\5\111\11\0\21\111\1\u014c\15\111"+
    "\1\102\10\0\6\111\1\0\5\111\1\272\2\0\2\111"+
    "\1\u014d\3\111\1\0\1\111\1\0\5\111\11\0\37\111"+
    "\1\102\10\0\6\111\1\0\5\111\1\272\2\0\1\u014e"+
    "\5\111\1\0\1\111\1\0\5\111\11\0\22\111\1\u014f"+
    "\6\111\1\344\5\111\1\102\10\0\6\111\1\0\5\111"+
    "\1\272\2\0\1\111\1\u0150\4\111\1\0\1\111\1\0"+
    "\5\111\11\0\2\111\1\u0151\34\111\1\102\10\0\6\111"+
    "\1\0\5\111\1\272\2\0\6\111\1\0\1\111\1\0"+
    "\5\111\11\0\3\111\1\u0152\33\111\1\102\10\0\6\111"+
    "\1\0\5\111\1\272\2\0\6\111\1\0\1\111\1\0"+
    "\5\111\11\0\26\111\1\u0153\10\111\1\102\10\0\6\111"+
    "\1\0\5\111\1\272\2\0\6\111\1\0\1\111\1\0"+
    "\5\111\11\0\27\111\1\344\7\111\1\102\10\0\6\111"+
    "\1\0\5\111\1\272\2\0\2\111\1\u0154\3\111\1\0"+
    "\1\111\1\0\5\111\11\0\37\111\1\102\10\0\6\111"+
    "\1\0\5\111\1\272\2\0\6\111\1\0\1\111\1\0"+
    "\5\111\11\0\21\111\1\u0155\15\111\1\102\10\0\6\111"+
    "\1\0\5\111\1\272\2\0\6\111\1\0\1\111\1\0"+
    "\5\111\11\0\24\111\1\u0156\12\111\1\102\10\0\6\111"+
    "\1\0\5\111\1\272\2\0\2\111\1\u0157\3\111\1\0"+
    "\1\111\1\0\5\111\11\0\37\111\1\102\10\0\6\111"+
    "\1\0\5\111\1\272\2\0\3\111\1\u0158\2\111\1\0"+
    "\1\111\1\0\5\111\11\0\37\111\1\102\10\0\6\111"+
    "\1\0\5\111\1\272\2\0\3\111\1\u0159\2\111\1\0"+
    "\1\111\1\0\5\111\11\0\37\111\1\102\10\0\6\111"+
    "\1\0\5\111\1\272\2\0\6\111\1\0\1\111\1\0"+
    "\5\111\11\0\26\111\1\u015a\10\111\1\102\10\0\6\111"+
    "\1\0\5\111\1\272\2\0\1\111\1\344\4\111\1\0"+
    "\1\111\1\0\5\111\11\0\37\111\1\102\10\0\6\111"+
    "\1\0\5\111\1\272\2\0\6\111\1\0\1\111\1\0"+
    "\5\111\11\0\24\111\1\u015b\12\111\1\102\10\0\6\111"+
    "\1\0\5\111\1\272\2\0\6\111\1\0\1\111\1\0"+
    "\5\111\11\0\3\111\1\u015c\33\111\1\102\10\0\6\111"+
    "\1\0\5\111\1\272\2\0\6\111\1\0\1\111\1\0"+
    "\5\111\11\0\22\111\1\u015d\14\111\1\102\10\0\6\111"+
    "\1\0\5\111\1\272\2\0\6\111\1\0\1\111\1\0"+
    "\5\111\11\0\2\111\1\u015e\34\111\1\102\10\0\6\111"+
    "\1\0\5\111\1\272\2\0\6\111\1\0\1\111\1\0"+
    "\5\111\11\0\24\111\1\u015f\12\111\1\102\10\0\6\111"+
    "\1\0\5\111\1\272\2\0\3\111\1\u0160\2\111\1\0"+
    "\1\111\1\0\5\111\11\0\37\111\1\102\10\0\6\111"+
    "\1\0\5\111\1\272\2\0\2\111\1\u0161\3\111\1\0"+
    "\1\111\1\0\5\111\11\0\1\u0162\36\111\1\102\10\0"+
    "\6\111\1\0\5\111\1\272\2\0\3\111\1\u0163\2\111"+
    "\1\0\1\111\1\0\5\111\11\0\37\111\1\102\10\0"+
    "\6\111\1\0\5\111\1\272\2\0\6\111\1\0\1\111"+
    "\1\0\5\111\11\0\22\111\1\u0164\14\111\1\102\10\0"+
    "\6\111\1\0\5\111\1\272\2\0\6\111\1\0\1\111"+
    "\1\0\5\111\11\0\22\111\1\u0165\14\111\1\102\10\0"+
    "\6\111\1\0\5\111\1\272\2\0\2\111\1\u0166\3\111"+
    "\1\0\1\111\1\0\5\111\11\0\1\u0167\36\111\1\102"+
    "\10\0\6\111\1\0\5\111\1\272\2\0\6\111\1\0"+
    "\1\111\1\0\2\111\1\u0168\2\111\11\0\6\111\1\u0169"+
    "\30\111\1\102\10\0\6\111\1\0\5\111\1\272\2\0"+
    "\6\111\1\0\1\111\1\0\5\111\11\0\3\111\1\u016a"+
    "\33\111\1\102\10\0\6\111\1\0\5\111\1\272\2\0"+
    "\4\111\1\u016b\1\111\1\0\1\111\1\0\5\111\11\0"+
    "\37\111\1\102\10\0\6\111\1\0\5\111\1\272\2\0"+
    "\6\111\1\0\1\111\1\0\5\111\11\0\2\111\1\u016c"+
    "\21\111\1\u016d\12\111\1\102\10\0\6\111\1\0\5\111"+
    "\1\272\2\0\1\111\1\u016e\4\111\1\0\1\111\1\0"+
    "\5\111\11\0\1\111\1\u016f\35\111\1\102\10\0\6\111"+
    "\1\0\5\111\1\272\2\0\6\111\1\0\1\111\1\0"+
    "\5\111\11\0\6\111\1\344\30\111\1\102\10\0\6\111"+
    "\1\0\5\111\1\272\2\0\1\u0170\5\111\1\0\1\111"+
    "\1\0\5\111\11\0\37\111\1\102\10\0\6\111\1\0"+
    "\5\111\1\272\2\0\6\111\1\0\1\111\1\0\5\111"+
    "\11\0\1\111\1\u0171\35\111\1\102\10\0\6\111\1\0"+
    "\5\111\1\272\2\0\6\111\1\0\1\111\1\0\5\111"+
    "\11\0\1\u0162\36\111\1\102\10\0\6\111\1\0\5\111"+
    "\1\272\2\0\6\111\1\0\1\111\1\0\5\111\11\0"+
    "\22\111\1\u0172\14\111\1\102\10\0\6\111\1\0\5\111"+
    "\1\272\2\0\2\111\1\u0173\3\111\1\0\1\111\1\0"+
    "\5\111\11\0\3\111\1\u0174\33\111\1\102\10\0\6\111"+
    "\1\0\5\111\1\272\2\0\6\111\1\0\1\111\1\0"+
    "\5\111\11\0\1\u0175\36\111\1\102\10\0\6\111\1\0"+
    "\5\111\1\272\2\0\4\111\1\u0176\1\111\1\0\1\111"+
    "\1\0\3\111\1\u0177\1\111\11\0\26\111\1\u0178\10\111"+
    "\1\102\10\0\6\111\1\0\5\111\1\272\2\0\1\u0179"+
    "\5\111\1\0\1\111\1\0\5\111\11\0\37\111\1\102"+
    "\10\0\6\111\1\0\5\111\1\272\2\0\3\111\1\u017a"+
    "\2\111\1\0\1\111\1\0\5\111\11\0\37\111\1\102"+
    "\10\0\6\111\1\0\5\111\1\272\2\0\2\111\1\u017b"+
    "\3\111\1\0\1\111\1\0\5\111\11\0\37\111\1\102"+
    "\10\0\6\111\1\0\5\111\1\272\2\0\6\111\1\0"+
    "\1\111\1\0\5\111\11\0\2\111\1\u017c\34\111\1\102"+
    "\10\0\6\111\1\0\5\111\1\272\2\0\6\111\1\0"+
    "\1\111\1\0\5\111\11\0\2\111\1\u017d\23\111\1\u017e"+
    "\10\111\1\102\10\0\6\111\1\0\5\111\1\272\2\0"+
    "\2\111\1\u017f\3\111\1\0\1\111\1\0\5\111\11\0"+
    "\37\111\46\0\1\u0180\60\0\6\153\1\0\5\153\3\0"+
    "\1\153\1\u0181\4\153\3\0\5\153\11\0\37\153\2\44"+
    "\1\0\1\44\1\0\2\44\2\0\3\44\1\u0182\2\44"+
    "\1\0\6\44\2\0\31\44\1\u0182\36\44\1\0\1\44"+
    "\1\0\2\44\2\0\1\44\1\u0122\4\44\1\0\6\44"+
    "\2\0\3\44\1\67\24\44\1\u0122\4\44\1\67\32\44"+
    "\1\0\1\44\1\0\2\44\2\0\3\44\1\u0183\2\44"+
    "\1\0\6\44\2\0\31\44\1\u0183\2\44\1\u0184\16\44"+
    "\1\u0184\14\44\1\0\1\44\1\0\2\44\2\0\5\44"+
    "\1\u0185\1\0\6\44\2\0\2\44\1\u0185\65\44\1\0"+
    "\1\44\1\0\2\44\2\0\6\44\1\0\6\44\2\0"+
    "\45\44\1\u0122\13\44\1\u0122\6\44\1\0\1\44\1\0"+
    "\2\44\2\0\6\44\1\0\6\44\2\0\15\44\1\u0186"+
    "\32\44\1\u0186\17\44\1\0\1\44\1\0\2\44\2\0"+
    "\4\44\1\67\1\44\1\0\6\44\2\0\32\44\1\67"+
    "\35\44\1\0\1\44\1\0\2\44\2\0\2\44\1\u0187"+
    "\3\44\1\0\6\44\2\0\1\44\1\u0187\66\44\1\0"+
    "\1\44\1\0\2\44\2\0\6\44\1\0\6\44\2\0"+
    "\12\44\1\u013b\42\44\1\u013b\12\44\1\0\1\44\1\0"+
    "\2\44\2\0\6\44\1\0\6\44\2\0\15\44\1\67"+
    "\32\44\1\67\17\44\1\0\1\44\1\0\2\44\2\0"+
    "\5\44\1\u0122\1\0\6\44\2\0\2\44\1\u0122\65\44"+
    "\1\0\1\44\1\0\2\44\2\0\6\44\1\0\6\44"+
    "\2\0\45\44\1\u0188\13\44\1\u0188\6\44\1\0\1\44"+
    "\1\0\2\44\2\0\6\44\1\0\6\44\2\0\42\44"+
    "\1\u0189\17\44\1\u0189\5\44\1\0\1\44\1\0\2\44"+
    "\2\0\6\44\1\0\6\44\2\0\37\44\1\u018a\23\44"+
    "\1\u018a\4\44\1\0\1\44\1\0\2\44\2\0\6\44"+
    "\1\0\6\44\2\0\3\44\1\u018b\31\44\1\u018b\32\44"+
    "\1\0\1\44\1\0\2\44\2\0\6\44\1\0\6\44"+
    "\2\0\1\u011b\40\44\1\u011b\26\44\1\0\1\44\1\0"+
    "\2\44\2\0\6\44\1\0\6\44\2\0\36\44\1\u0122"+
    "\21\44\1\u0122\7\44\1\0\1\44\1\0\2\44\2\0"+
    "\6\44\1\0\6\44\2\0\33\44\1\u018c\15\44\1\u018c"+
    "\16\44\1\0\1\44\1\0\2\44\2\0\6\44\1\0"+
    "\6\44\2\0\42\44\1\u012f\17\44\1\u012f\5\44\1\0"+
    "\1\44\1\0\2\44\2\0\3\44\1\u018d\2\44\1\0"+
    "\6\44\2\0\31\44\1\u018d\36\44\1\0\1\44\1\0"+
    "\2\44\2\0\6\44\1\0\6\44\2\0\33\44\1\u0126"+
    "\15\44\1\u0126\16\44\1\0\1\44\1\0\2\44\2\0"+
    "\6\44\1\0\6\44\2\0\34\44\1\u011b\16\44\1\u011b"+
    "\14\44\1\0\1\44\1\0\2\44\2\0\5\44\1\u018e"+
    "\1\0\6\44\2\0\2\44\1\u018e\65\44\1\0\1\44"+
    "\1\0\2\44\2\0\6\44\1\0\6\44\2\0\33\44"+
    "\1\257\15\44\1\257\16\44\1\0\1\44\1\0\2\44"+
    "\2\0\5\44\1\u018f\1\0\6\44\2\0\2\44\1\u018f"+
    "\65\44\1\0\1\44\1\0\2\44\2\0\1\44\1\u0190"+
    "\4\44\1\0\6\44\2\0\30\44\1\u0190\37\44\1\0"+
    "\1\44\1\0\2\44\2\0\6\44\1\0\6\44\2\0"+
    "\15\44\1\u0191\32\44\1\u0191\17\44\1\0\1\44\1\0"+
    "\2\44\2\0\6\44\1\0\6\44\2\0\36\44\1\67"+
    "\21\44\1\67\7\44\1\0\1\44\1\0\2\44\2\0"+
    "\6\44\1\0\6\44\2\0\34\44\1\u0192\16\44\1\u0192"+
    "\14\44\1\0\1\44\1\0\2\44\2\0\5\44\1\67"+
    "\1\0\6\44\2\0\2\44\1\67\65\44\1\0\1\44"+
    "\1\0\2\44\2\0\1\44\1\162\4\44\1\0\6\44"+
    "\2\0\30\44\1\162\37\44\1\0\1\44\1\0\2\44"+
    "\2\0\2\44\1\u0193\3\44\1\0\6\44\2\0\1\44"+
    "\1\u0193\66\44\1\0\1\44\1\0\2\44\2\0\6\44"+
    "\1\0\6\44\2\0\37\44\1\u0194\23\44\1\u0194\4\44"+
    "\1\0\1\44\1\0\2\44\2\0\6\44\1\0\6\44"+
    "\2\0\43\44\1\67\6\44\1\67\15\44\1\0\1\44"+
    "\1\0\2\44\2\0\6\44\1\0\6\44\2\0\15\44"+
    "\1\u0195\32\44\1\u0195\17\44\1\0\1\44\1\0\2\44"+
    "\2\0\6\44\1\0\6\44\2\0\15\44\1\u013b\32\44"+
    "\1\u013b\17\44\1\0\1\44\1\0\2\44\2\0\6\44"+
    "\1\0\6\44\2\0\15\44\1\262\32\44\1\262\17\44"+
    "\1\0\1\44\1\0\2\44\2\0\6\44\1\0\6\44"+
    "\2\0\37\44\1\u0196\23\44\1\u0196\4\44\1\0\1\44"+
    "\1\0\2\44\2\0\6\44\1\0\6\44\2\0\12\44"+
    "\1\u0197\42\44\1\u0197\12\44\1\0\1\44\1\0\2\44"+
    "\2\0\6\44\1\0\6\44\2\0\1\u0198\40\44\1\u0198"+
    "\26\44\1\0\1\44\1\0\2\44\2\0\6\44\1\0"+
    "\6\44\2\0\37\44\1\67\23\44\1\67\4\44\1\0"+
    "\1\44\1\0\2\44\2\0\6\44\1\0\6\44\2\0"+
    "\15\44\1\257\32\44\1\257\17\44\1\0\1\44\1\0"+
    "\2\44\2\0\6\44\1\0\6\44\2\0\3\44\1\u0199"+
    "\31\44\1\u0199\32\44\1\0\1\44\1\0\2\44\2\0"+
    "\6\44\1\0\6\44\2\0\40\44\1\u0106\13\44\1\u0106"+
    "\13\44\1\0\1\44\1\0\2\44\2\0\6\44\1\0"+
    "\6\44\2\0\34\44\1\u019a\16\44\1\u019a\14\44\1\0"+
    "\1\44\1\0\2\44\2\0\3\44\1\u019b\2\44\1\0"+
    "\6\44\2\0\31\44\1\u019b\36\44\1\0\1\44\1\0"+
    "\2\44\2\0\6\44\1\0\6\44\2\0\33\44\1\67"+
    "\15\44\1\67\16\44\1\0\1\44\1\0\2\44\2\0"+
    "\6\44\1\0\6\44\2\0\12\44\1\u019c\42\44\1\u019c"+
    "\12\44\1\0\1\44\1\0\2\44\2\0\3\44\1\221"+
    "\2\44\1\0\6\44\2\0\31\44\1\221\36\44\1\0"+
    "\1\44\1\0\2\44\2\0\2\44\1\u019d\3\44\1\0"+
    "\6\44\2\0\1\44\1\u019d\66\44\1\0\1\44\1\0"+
    "\2\44\2\0\3\44\1\u018f\2\44\1\0\6\44\2\0"+
    "\31\44\1\u018f\10\44\1\u0189\17\44\1\u0189\5\44\1\0"+
    "\1\44\1\0\2\44\2\0\4\44\1\u010c\1\44\1\0"+
    "\6\44\2\0\32\44\1\u010c\35\44\1\0\1\44\1\0"+
    "\2\44\2\0\5\44\1\u019e\1\0\6\44\2\0\2\44"+
    "\1\u019e\65\44\1\0\1\44\1\0\2\44\2\0\6\44"+
    "\1\0\6\44\2\0\15\44\1\262\15\44\1\67\14\44"+
    "\1\262\1\67\16\44\1\0\1\44\1\0\2\44\2\0"+
    "\6\44\1\0\6\44\2\0\1\67\40\44\1\67\26\44"+
    "\1\0\1\44\1\0\2\44\2\0\6\44\1\0\6\44"+
    "\2\0\43\44\1\67\1\u019f\5\44\1\67\15\44\1\0"+
    "\1\44\1\0\2\44\2\0\6\44\1\0\6\44\2\0"+
    "\12\44\1\u01a0\42\44\1\u01a0\12\44\1\0\1\44\1\0"+
    "\2\44\2\0\6\44\1\0\6\44\2\0\33\44\1\u01a1"+
    "\15\44\1\u01a1\16\44\1\0\1\44\1\0\2\44\2\0"+
    "\6\44\1\0\6\44\2\0\33\44\1\u01a2\15\44\1\u01a2"+
    "\16\44\1\0\1\44\1\0\2\44\2\0\6\44\1\0"+
    "\6\44\2\0\42\44\1\u01a3\17\44\1\u01a3\5\44\1\0"+
    "\1\44\1\0\2\44\2\0\6\44\1\0\6\44\2\0"+
    "\15\44\1\221\32\44\1\221\17\44\1\0\1\44\1\0"+
    "\2\44\2\0\6\44\1\0\6\44\2\0\40\44\1\u01a4"+
    "\13\44\1\u01a4\11\44\12\0\1\u01a5\45\0\1\u01a5\45\0"+
    "\1\u01a6\105\0\1\102\10\0\1\102\1\u01a7\4\102\1\0"+
    "\1\102\4\u01a7\1\102\2\0\4\102\2\u01a7\1\0\1\102"+
    "\1\0\2\102\3\u01a7\11\0\1\102\1\u01a7\2\102\1\u01a7"+
    "\4\102\1\u01a7\7\102\2\u01a7\2\102\1\u01a7\12\102\10\0"+
    "\6\111\1\0\5\111\1\272\2\0\6\111\1\0\1\111"+
    "\1\0\5\111\11\0\2\111\1\u01a8\34\111\1\275\10\0"+
    "\6\275\1\0\1\275\2\u0141\1\275\1\u0141\1\275\2\0"+
    "\5\275\1\u0141\1\0\1\275\1\0\2\275\2\277\1\275"+
    "\11\0\11\275\1\277\13\275\1\277\11\275\21\0\2\u0141"+
    "\1\0\1\u0141\10\0\1\u0141\60\0\1\275\10\0\1\275"+
    "\1\u0144\4\275\1\0\1\275\4\u0144\1\275\2\0\4\275"+
    "\2\u0144\1\0\1\275\1\0\1\275\1\u0143\3\u0144\11\0"+
    "\1\275\1\u0144\2\275\1\u0144\4\275\1\u0144\7\275\2\u0144"+
    "\2\275\1\u0144\1\u0143\10\275\22\0\1\305\1\0\4\305"+
    "\1\u01a9\5\305\6\0\1\305\51\0\2\u0146\1\0\22\u0146"+
    "\1\u01aa\1\u01ab\67\u0146\2\116\1\305\22\116\1\306\1\u01ac"+
    "\67\116\2\u0146\1\0\7\u0146\1\u01ad\6\u0146\4\u01ad\1\u01aa"+
    "\1\u01ab\5\u0146\2\u01ad\5\u0146\3\u01ad\12\u0146\1\u01ad\2\u0146"+
    "\1\u01ad\4\u0146\1\u01ad\7\u0146\2\u01ad\2\u0146\1\u01ad\11\u0146"+
    "\2\u0149\1\0\22\u0149\1\u01ae\1\u0149\1\u01af\66\u0149\2\117"+
    "\1\0\22\117\1\310\1\117\1\u01b0\66\117\2\u0149\1\0"+
    "\7\u0149\1\u01b1\6\u0149\4\u01b1\1\u01ae\1\u0149\1\u01af\4\u0149"+
    "\2\u01b1\5\u0149\3\u01b1\12\u0149\1\u01b1\2\u0149\1\u01b1\4\u0149"+
    "\1\u01b1\7\u0149\2\u01b1\2\u0149\1\u01b1\11\u0149\1\102\10\0"+
    "\6\111\1\0\5\111\1\272\2\0\6\111\1\0\1\111"+
    "\1\0\5\111\11\0\1\354\36\111\1\102\10\0\6\111"+
    "\1\0\5\111\1\272\2\0\1\u01b2\5\111\1\0\1\111"+
    "\1\0\5\111\11\0\37\111\1\102\10\0\6\111\1\0"+
    "\5\111\1\272\2\0\6\111\1\0\1\111\1\0\5\111"+
    "\11\0\21\111\1\u01b3\15\111\1\102\10\0\6\111\1\0"+
    "\5\111\1\272\2\0\3\111\1\u01b4\2\111\1\0\1\111"+
    "\1\0\5\111\11\0\37\111\1\102\10\0\6\111\1\0"+
    "\5\111\1\272\2\0\6\111\1\0\1\111\1\0\5\111"+
    "\11\0\24\111\1\u01b5\12\111\1\102\10\0\6\111\1\0"+
    "\5\111\1\272\2\0\6\111\1\0\1\111\1\0\5\111"+
    "\11\0\1\344\36\111\1\102\10\0\6\111\1\0\5\111"+
    "\1\272\2\0\6\111\1\0\1\111\1\0\5\111\11\0"+
    "\21\111\1\u01b6\15\111\1\102\10\0\6\111\1\0\5\111"+
    "\1\272\2\0\6\111\1\0\1\111\1\0\5\111\11\0"+
    "\26\111\1\344\10\111\1\102\10\0\6\111\1\0\5\111"+
    "\1\272\2\0\6\111\1\0\1\111\1\0\5\111\11\0"+
    "\2\111\1\u01b7\34\111\1\102\10\0\6\111\1\0\5\111"+
    "\1\272\2\0\6\111\1\0\1\111\1\0\5\111\11\0"+
    "\22\111\1\u01b8\14\111\1\102\10\0\6\111\1\0\5\111"+
    "\1\272\2\0\6\111\1\0\1\111\1\0\5\111\11\0"+
    "\26\111\1\u01b9\10\111\1\102\10\0\6\111\1\0\5\111"+
    "\1\272\2\0\6\111\1\0\1\111\1\0\5\111\11\0"+
    "\21\111\1\u01ba\15\111\1\102\10\0\6\111\1\0\5\111"+
    "\1\272\2\0\6\111\1\0\1\111\1\0\5\111\11\0"+
    "\1\111\1\u01bb\35\111\1\102\10\0\6\111\1\0\5\111"+
    "\1\272\2\0\6\111\1\0\1\111\1\0\5\111\11\0"+
    "\22\111\1\u01bc\14\111\1\102\10\0\6\111\1\0\5\111"+
    "\1\272\2\0\6\111\1\0\1\111\1\0\5\111\11\0"+
    "\1\u014e\36\111\1\102\10\0\6\111\1\0\5\111\1\272"+
    "\2\0\6\111\1\0\1\111\1\0\5\111\11\0\22\111"+
    "\1\u01bd\14\111\1\102\10\0\6\111\1\0\5\111\1\272"+
    "\2\0\6\111\1\0\1\111\1\0\5\111\11\0\21\111"+
    "\1\330\15\111\1\102\10\0\6\111\1\0\5\111\1\272"+
    "\2\0\2\111\1\u01be\3\111\1\0\1\111\1\0\5\111"+
    "\11\0\37\111\1\102\10\0\6\111\1\0\5\111\1\272"+
    "\2\0\2\111\1\u0161\3\111\1\0\1\111\1\0\5\111"+
    "\11\0\37\111\1\102\10\0\6\111\1\0\5\111\1\272"+
    "\2\0\1\111\1\u01bd\4\111\1\0\1\111\1\0\5\111"+
    "\11\0\37\111\1\102\10\0\6\111\1\0\5\111\1\272"+
    "\2\0\6\111\1\0\1\111\1\0\5\111\11\0\1\111"+
    "\1\u01bf\35\111\1\102\10\0\6\111\1\0\5\111\1\272"+
    "\2\0\6\111\1\0\1\111\1\0\5\111\11\0\1\111"+
    "\1\u017b\35\111\1\102\10\0\6\111\1\0\5\111\1\272"+
    "\2\0\6\111\1\0\1\111\1\0\5\111\11\0\21\111"+
    "\1\344\15\111\1\102\10\0\6\111\1\0\5\111\1\272"+
    "\2\0\2\111\1\u01c0\3\111\1\0\1\111\1\0\5\111"+
    "\11\0\1\u01c1\36\111\1\102\10\0\6\111\1\0\5\111"+
    "\1\272\2\0\6\111\1\0\1\111\1\0\5\111\11\0"+
    "\1\u0151\36\111\1\102\10\0\6\111\1\0\5\111\1\272"+
    "\2\0\1\111\1\u01ba\4\111\1\0\1\111\1\0\5\111"+
    "\11\0\37\111\1\102\10\0\6\111\1\0\5\111\1\272"+
    "\2\0\6\111\1\0\1\111\1\0\5\111\11\0\21\111"+
    "\1\u01c2\15\111\1\102\10\0\6\111\1\0\5\111\1\272"+
    "\2\0\2\111\1\u01c3\3\111\1\0\1\111\1\0\5\111"+
    "\11\0\37\111\1\102\10\0\6\111\1\0\5\111\1\272"+
    "\2\0\6\111\1\0\1\111\1\0\5\111\11\0\2\111"+
    "\1\u01c4\34\111\1\102\10\0\6\111\1\0\5\111\1\272"+
    "\2\0\6\111\1\0\1\111\1\0\5\111\11\0\22\111"+
    "\1\u01c5\14\111\1\102\10\0\6\111\1\0\5\111\1\272"+
    "\2\0\6\111\1\0\1\111\1\0\5\111\11\0\24\111"+
    "\1\u01c6\1\111\1\u01c7\10\111\1\102\10\0\6\111\1\0"+
    "\5\111\1\272\2\0\6\111\1\0\1\111\1\0\5\111"+
    "\11\0\26\111\1\u01be\10\111\1\102\10\0\6\111\1\0"+
    "\5\111\1\272\2\0\6\111\1\0\1\111\1\0\5\111"+
    "\11\0\32\111\1\u01c8\4\111\1\102\10\0\6\111\1\0"+
    "\5\111\1\272\2\0\2\111\1\u01c9\3\111\1\0\1\111"+
    "\1\0\5\111\11\0\37\111\1\102\10\0\6\111\1\0"+
    "\5\111\1\272\2\0\6\111\1\0\1\111\1\0\5\111"+
    "\11\0\1\u01ca\36\111\1\102\10\0\6\111\1\0\5\111"+
    "\1\272\2\0\6\111\1\0\1\111\1\0\5\111\11\0"+
    "\23\111\1\u01cb\13\111\1\102\10\0\6\111\1\0\5\111"+
    "\1\272\2\0\6\111\1\0\1\111\1\0\5\111\11\0"+
    "\34\111\1\344\2\111\1\102\10\0\6\111\1\0\5\111"+
    "\1\272\2\0\6\111\1\0\1\111\1\0\5\111\11\0"+
    "\22\111\1\u01cc\14\111\1\102\10\0\6\111\1\0\5\111"+
    "\1\272\2\0\6\111\1\0\1\111\1\0\5\111\11\0"+
    "\26\111\1\u01cd\10\111\1\102\10\0\6\111\1\0\5\111"+
    "\1\272\2\0\6\111\1\0\1\111\1\0\5\111\11\0"+
    "\21\111\1\u01ce\15\111\1\102\10\0\6\111\1\0\5\111"+
    "\1\272\2\0\6\111\1\0\1\111\1\0\5\111\11\0"+
    "\24\111\1\u01c6\12\111\1\102\10\0\6\111\1\0\5\111"+
    "\1\272\2\0\2\111\1\u01cf\3\111\1\0\1\111\1\0"+
    "\5\111\11\0\37\111\1\102\10\0\6\111\1\0\5\111"+
    "\1\272\2\0\1\u01d0\5\111\1\0\1\111\1\0\5\111"+
    "\11\0\37\111\1\102\10\0\6\111\1\0\5\111\1\272"+
    "\2\0\6\111\1\0\1\111\1\0\5\111\11\0\22\111"+
    "\1\u01d1\14\111\1\102\10\0\6\111\1\0\5\111\1\272"+
    "\2\0\6\111\1\0\1\111\1\0\5\111\11\0\21\111"+
    "\1\u01d2\15\111\1\102\10\0\6\111\1\0\5\111\1\272"+
    "\2\0\4\111\1\u01d3\1\111\1\0\1\111\1\0\5\111"+
    "\11\0\37\111\1\102\10\0\6\111\1\0\5\111\1\272"+
    "\2\0\6\111\1\0\1\111\1\0\5\111\11\0\33\111"+
    "\1\u01ba\3\111\1\102\10\0\6\111\1\0\5\111\1\272"+
    "\2\0\6\111\1\0\1\111\1\0\5\111\11\0\30\111"+
    "\1\344\6\111\1\102\10\0\6\111\1\0\5\111\1\272"+
    "\2\0\6\111\1\0\1\111\1\0\5\111\11\0\26\111"+
    "\1\u0162\10\111\1\102\10\0\6\111\1\0\5\111\1\272"+
    "\2\0\6\111\1\0\1\111\1\0\5\111\11\0\25\111"+
    "\1\344\11\111\1\102\10\0\6\111\1\0\5\111\1\272"+
    "\2\0\6\111\1\0\1\111\1\0\5\111\11\0\22\111"+
    "\1\u01d4\14\111\1\102\10\0\6\111\1\0\5\111\1\272"+
    "\2\0\6\111\1\0\1\111\1\0\5\111\11\0\24\111"+
    "\1\344\12\111\11\0\6\153\1\0\5\153\3\0\6\153"+
    "\3\0\5\153\11\0\2\153\1\u01d5\34\153\2\44\1\0"+
    "\1\44\1\0\2\44\2\0\4\44\1\u011b\1\44\1\0"+
    "\6\44\2\0\32\44\1\u011b\35\44\1\0\1\44\1\0"+
    "\2\44\2\0\6\44\1\0\6\44\2\0\43\44\1\u0106"+
    "\6\44\1\u0106\15\44\1\0\1\44\1\0\2\44\2\0"+
    "\6\44\1\0\6\44\2\0\3\44\1\203\31\44\1\203"+
    "\32\44\1\0\1\44\1\0\2\44\2\0\3\44\1\u018f"+
    "\2\44\1\0\6\44\2\0\31\44\1\u018f\36\44\1\0"+
    "\1\44\1\0\2\44\2\0\1\44\1\u011b\4\44\1\0"+
    "\6\44\2\0\30\44\1\u011b\37\44\1\0\1\44\1\0"+
    "\2\44\2\0\1\44\1\u0106\4\44\1\0\6\44\2\0"+
    "\30\44\1\u0106\37\44\1\0\1\44\1\0\2\44\2\0"+
    "\6\44\1\0\6\44\2\0\33\44\1\u01d6\15\44\1\u01d6"+
    "\16\44\1\0\1\44\1\0\2\44\2\0\2\44\1\u01d7"+
    "\3\44\1\0\6\44\2\0\1\44\1\u01d7\66\44\1\0"+
    "\1\44\1\0\2\44\2\0\6\44\1\0\6\44\2\0"+
    "\15\44\1\u01d8\15\44\1\u0195\14\44\1\u01d8\1\u0195\16\44"+
    "\1\0\1\44\1\0\2\44\2\0\6\44\1\0\6\44"+
    "\2\0\40\44\1\u01d9\13\44\1\u01d9\13\44\1\0\1\44"+
    "\1\0\2\44\2\0\6\44\1\0\6\44\2\0\37\44"+
    "\1\u0106\23\44\1\u0106\4\44\1\0\1\44\1\0\2\44"+
    "\2\0\6\44\1\0\6\44\2\0\3\44\1\u01da\31\44"+
    "\1\u01da\32\44\1\0\1\44\1\0\2\44\2\0\6\44"+
    "\1\0\6\44\2\0\33\44\1\u01db\15\44\1\u01db\16\44"+
    "\1\0\1\44\1\0\2\44\2\0\6\44\1\0\6\44"+
    "\2\0\34\44\1\254\16\44\1\254\14\44\1\0\1\44"+
    "\1\0\2\44\2\0\6\44\1\0\6\44\2\0\43\44"+
    "\1\u01dc\6\44\1\u01dc\15\44\1\0\1\44\1\0\2\44"+
    "\2\0\6\44\1\0\6\44\2\0\13\44\2\u01dd\53\44"+
    "\1\0\1\44\1\0\2\44\2\0\6\44\1\0\6\44"+
    "\2\0\1\u0195\40\44\1\u0195\26\44\1\0\1\44\1\0"+
    "\2\44\2\0\6\44\1\0\6\44\2\0\33\44\1\u01de"+
    "\15\44\1\u01de\16\44\1\0\1\44\1\0\2\44\2\0"+
    "\6\44\1\0\6\44\2\0\3\44\1\257\31\44\1\257"+
    "\32\44\1\0\1\44\1\0\2\44\2\0\6\44\1\0"+
    "\6\44\2\0\15\44\1\u01df\32\44\1\u01df\17\44\1\0"+
    "\1\44\1\0\2\44\2\0\6\44\1\0\6\44\2\0"+
    "\40\44\1\u01e0\13\44\1\u01e0\13\44\1\0\1\44\1\0"+
    "\2\44\2\0\2\44\1\u0106\3\44\1\0\6\44\2\0"+
    "\1\44\1\u0106\66\44\1\0\1\44\1\0\2\44\2\0"+
    "\5\44\1\u01e1\1\0\6\44\2\0\2\44\1\u01e1\65\44"+
    "\1\0\1\44\1\0\2\44\2\0\6\44\1\0\6\44"+
    "\2\0\3\44\1\u01e2\31\44\1\u01e2\32\44\1\0\1\44"+
    "\1\0\2\44\2\0\1\44\1\176\4\44\1\0\6\44"+
    "\2\0\30\44\1\176\37\44\1\0\1\44\1\0\2\44"+
    "\2\0\6\44\1\0\6\44\2\0\15\44\1\u011b\32\44"+
    "\1\u011b\17\44\1\0\1\44\1\0\2\44\2\0\6\44"+
    "\1\0\6\44\2\0\15\44\1\u01e3\32\44\1\u01e3\17\44"+
    "\1\0\1\44\1\0\2\44\2\0\3\44\1\u01e4\2\44"+
    "\1\0\6\44\2\0\31\44\1\u01e4\36\44\1\0\1\44"+
    "\1\0\2\44\2\0\6\44\1\0\6\44\2\0\1\u01e5"+
    "\40\44\1\u01e5\26\44\1\0\1\44\1\0\2\44\2\0"+
    "\6\44\1\0\6\44\2\0\34\44\1\203\16\44\1\203"+
    "\14\44\1\0\1\44\1\0\2\44\2\0\3\44\1\u01e6"+
    "\2\44\1\0\6\44\2\0\31\44\1\u01e6\36\44\1\0"+
    "\1\44\1\0\2\44\2\0\5\44\1\u01e7\1\0\6\44"+
    "\2\0\2\44\1\u01e7\7\44\1\u01e8\27\44\1\u01e9\12\44"+
    "\1\u01e8\4\44\1\u01e9\5\44\1\0\1\44\1\0\2\44"+
    "\2\0\6\44\1\0\6\44\2\0\15\44\1\254\32\44"+
    "\1\254\15\44\13\0\1\u01ea\15\0\1\u01ea\64\0\1\102"+
    "\10\0\1\102\1\u01eb\4\102\1\0\1\102\4\u01eb\1\102"+
    "\2\0\4\102\2\u01eb\1\0\1\102\1\0\2\102\3\u01eb"+
    "\11\0\1\102\1\u01eb\2\102\1\u01eb\4\102\1\u01eb\7\102"+
    "\2\u01eb\2\102\1\u01eb\12\102\10\0\6\111\1\0\5\111"+
    "\1\272\2\0\3\111\1\u01ec\2\111\1\0\1\111\1\0"+
    "\5\111\11\0\37\111\12\0\1\u01ed\6\0\4\u01ed\7\0"+
    "\2\u01ed\5\0\3\u01ed\12\0\1\u01ed\2\0\1\u01ed\4\0"+
    "\1\u01ed\7\0\2\u01ed\2\0\1\u01ed\11\0\2\u0146\1\0"+
    "\22\u0146\1\u01aa\72\u0146\1\0\7\u0146\1\u01ee\6\u0146\4\u01ee"+
    "\1\u01aa\1\u01ab\5\u0146\2\u01ee\5\u0146\3\u01ee\12\u0146\1\u01ee"+
    "\2\u0146\1\u01ee\4\u0146\1\u01ee\7\u0146\2\u01ee\2\u0146\1\u01ee"+
    "\11\u0146\2\u0149\1\0\22\u0149\1\u01ae\72\u0149\1\0\7\u0149"+
    "\1\u01ef\6\u0149\4\u01ef\1\u01ae\1\u0149\1\u01af\4\u0149\2\u01ef"+
    "\5\u0149\3\u01ef\12\u0149\1\u01ef\2\u0149\1\u01ef\4\u0149\1\u01ef"+
    "\7\u0149\2\u01ef\2\u0149\1\u01ef\11\u0149\1\102\10\0\6\111"+
    "\1\0\5\111\1\272\2\0\1\111\1\u01f0\4\111\1\0"+
    "\1\111\1\0\5\111\11\0\37\111\1\102\10\0\6\111"+
    "\1\0\5\111\1\272\2\0\6\111\1\0\1\111\1\0"+
    "\5\111\11\0\1\u01f1\36\111\1\102\10\0\6\111\1\0"+
    "\5\111\1\272\2\0\6\111\1\0\1\111\1\0\5\111"+
    "\11\0\27\111\1\u01f2\7\111\1\102\10\0\6\111\1\0"+
    "\5\111\1\272\2\0\6\111\1\0\1\111\1\0\5\111"+
    "\11\0\24\111\1\u01f3\12\111\1\102\10\0\6\111\1\0"+
    "\5\111\1\272\2\0\6\111\1\0\1\111\1\0\5\111"+
    "\11\0\32\111\1\u0162\4\111\1\102\10\0\6\111\1\0"+
    "\5\111\1\272\2\0\6\111\1\0\1\111\1\0\5\111"+
    "\11\0\23\111\1\344\13\111\1\102\10\0\6\111\1\0"+
    "\5\111\1\272\2\0\6\111\1\0\1\111\1\0\5\111"+
    "\11\0\21\111\1\u01f4\15\111\1\102\10\0\6\111\1\0"+
    "\5\111\1\272\2\0\2\111\1\u01f5\3\111\1\0\1\111"+
    "\1\0\5\111\11\0\37\111\1\102\10\0\6\111\1\0"+
    "\5\111\1\272\2\0\6\111\1\0\1\111\1\0\5\111"+
    "\11\0\26\111\1\u01f6\10\111\1\102\10\0\6\111\1\0"+
    "\5\111\1\272\2\0\2\111\1\u01ba\3\111\1\0\1\111"+
    "\1\0\5\111\11\0\37\111\1\102\10\0\6\111\1\0"+
    "\5\111\1\272\2\0\6\111\1\0\1\111\1\0\5\111"+
    "\11\0\2\111\1\u01f7\34\111\1\102\10\0\6\111\1\0"+
    "\5\111\1\272\2\0\6\111\1\0\1\111\1\0\5\111"+
    "\11\0\30\111\1\u01f8\6\111\1\102\10\0\6\111\1\0"+
    "\5\111\1\272\2\0\6\111\1\0\1\111\1\0\5\111"+
    "\11\0\2\111\1\u01f9\34\111\1\102\10\0\6\111\1\0"+
    "\5\111\1\272\2\0\2\111\1\344\3\111\1\0\1\111"+
    "\1\0\5\111\11\0\37\111\1\102\10\0\6\111\1\0"+
    "\5\111\1\272\2\0\1\111\1\u01fa\4\111\1\0\1\111"+
    "\1\0\5\111\11\0\37\111\1\102\10\0\6\111\1\0"+
    "\5\111\1\272\2\0\6\111\1\0\1\111\1\0\5\111"+
    "\11\0\22\111\1\u01fb\14\111\1\102\10\0\6\111\1\0"+
    "\5\111\1\272\2\0\3\111\1\u01fc\2\111\1\0\1\111"+
    "\1\0\5\111\11\0\37\111\1\102\10\0\6\111\1\0"+
    "\5\111\1\272\2\0\6\111\1\0\1\111\1\0\5\111"+
    "\11\0\6\111\1\u01cd\30\111\1\102\10\0\6\111\1\0"+
    "\5\111\1\272\2\0\1\111\1\u01c1\4\111\1\0\1\111"+
    "\1\0\5\111\11\0\37\111\1\102\10\0\6\111\1\0"+
    "\5\111\1\272\2\0\6\111\1\0\1\111\1\0\5\111"+
    "\11\0\21\111\1\u01fd\15\111\1\102\10\0\6\111\1\0"+
    "\5\111\1\272\2\0\6\111\1\0\1\111\1\0\5\111"+
    "\11\0\22\111\1\u01d2\14\111\1\102\10\0\6\111\1\0"+
    "\5\111\1\272\2\0\6\111\1\0\1\111\1\0\5\111"+
    "\11\0\21\111\1\u01fe\15\111\1\102\10\0\6\111\1\0"+
    "\5\111\1\272\2\0\6\111\1\0\1\111\1\0\5\111"+
    "\11\0\21\111\1\u01ff\15\111\1\102\10\0\6\111\1\0"+
    "\5\111\1\272\2\0\6\111\1\0\1\111\1\0\5\111"+
    "\11\0\22\111\1\u0200\14\111\1\102\10\0\6\111\1\0"+
    "\5\111\1\272\2\0\6\111\1\0\1\111\1\0\5\111"+
    "\11\0\3\111\1\u0201\33\111\1\102\10\0\6\111\1\0"+
    "\5\111\1\272\2\0\3\111\1\u0202\2\111\1\0\1\111"+
    "\1\0\5\111\11\0\37\111\1\102\10\0\6\111\1\0"+
    "\5\111\1\272\2\0\1\111\1\u0203\4\111\1\0\1\111"+
    "\1\0\5\111\11\0\37\111\1\102\10\0\6\111\1\0"+
    "\5\111\1\272\2\0\6\111\1\0\1\111\1\0\5\111"+
    "\11\0\33\111\1\u0204\3\111\1\102\10\0\6\111\1\0"+
    "\5\111\1\272\2\0\1\u0205\5\111\1\0\1\111\1\0"+
    "\5\111\11\0\37\111\1\102\10\0\6\111\1\0\5\111"+
    "\1\272\2\0\2\111\1\u0162\3\111\1\0\1\111\1\0"+
    "\5\111\11\0\37\111\1\102\10\0\6\111\1\0\5\111"+
    "\1\272\2\0\6\111\1\0\1\111\1\0\5\111\11\0"+
    "\26\111\1\u0157\10\111\1\102\10\0\6\111\1\0\5\111"+
    "\1\272\2\0\2\111\1\365\3\111\1\0\1\111\1\0"+
    "\5\111\11\0\37\111\11\0\6\153\1\0\5\153\3\0"+
    "\6\153\3\0\5\153\11\0\3\153\1\u0206\33\153\2\44"+
    "\1\0\1\44\1\0\2\44\2\0\1\67\5\44\1\0"+
    "\6\44\2\0\27\44\1\67\40\44\1\0\1\44\1\0"+
    "\2\44\2\0\6\44\1\0\6\44\2\0\34\44\1\u0207"+
    "\16\44\1\u0207\14\44\1\0\1\44\1\0\2\44\2\0"+
    "\6\44\1\0\6\44\2\0\3\44\1\u011b\31\44\1\u011b"+
    "\32\44\1\0\1\44\1\0\2\44\2\0\6\44\1\0"+
    "\6\44\2\0\15\44\1\u0208\32\44\1\u0208\17\44\1\0"+
    "\1\44\1\0\2\44\2\0\5\44\1\u0209\1\0\6\44"+
    "\2\0\2\44\1\u0209\65\44\1\0\1\44\1\0\2\44"+
    "\2\0\2\44\1\u020a\3\44\1\0\6\44\2\0\1\44"+
    "\1\u020a\66\44\1\0\1\44\1\0\2\44\2\0\6\44"+
    "\1\0\6\44\2\0\44\44\1\u020b\23\44\1\0\1\44"+
    "\1\0\2\44\2\0\6\44\1\0\6\44\2\0\34\44"+
    "\1\u01d8\16\44\1\u01d8\14\44\1\0\1\44\1\0\2\44"+
    "\2\0\6\44\1\0\6\44\2\0\37\44\1\u020c\23\44"+
    "\1\u020c\4\44\1\0\1\44\1\0\2\44\2\0\1\u019c"+
    "\5\44\1\0\6\44\2\0\27\44\1\u019c\40\44\1\0"+
    "\1\44\1\0\2\44\2\0\1\u020d\5\44\1\0\6\44"+
    "\2\0\27\44\1\u020d\40\44\1\0\1\44\1\0\2\44"+
    "\2\0\6\44\1\0\6\44\2\0\36\44\1\u0126\21\44"+
    "\1\u0126\7\44\1\0\1\44\1\0\2\44\2\0\1\u01d6"+
    "\5\44\1\0\6\44\2\0\27\44\1\u01d6\40\44\1\0"+
    "\1\44\1\0\2\44\2\0\1\44\1\u020e\4\44\1\0"+
    "\6\44\2\0\30\44\1\u020e\37\44\1\0\1\44\1\0"+
    "\2\44\2\0\6\44\1\0\6\44\2\0\15\44\1\u0106"+
    "\32\44\1\u0106\17\44\1\0\1\44\1\0\2\44\2\0"+
    "\6\44\1\0\6\44\2\0\12\44\1\u01d6\42\44\1\u01d6"+
    "\12\44\1\0\1\44\1\0\2\44\2\0\6\44\1\0"+
    "\6\44\2\0\15\44\1\u020f\32\44\1\u020f\17\44\1\0"+
    "\1\44\1\0\2\44\2\0\3\44\1\223\2\44\1\0"+
    "\6\44\2\0\31\44\1\223\36\44\1\0\1\44\1\0"+
    "\2\44\2\0\2\44\1\u0210\3\44\1\0\6\44\2\0"+
    "\1\44\1\u0210\64\44\14\0\1\u0211\44\0\1\u0211\34\0"+
    "\1\102\10\0\1\102\1\u0212\4\102\1\0\1\102\4\u0212"+
    "\1\102\2\0\4\102\2\u0212\1\0\1\102\1\0\2\102"+
    "\3\u0212\11\0\1\102\1\u0212\2\102\1\u0212\4\102\1\u0212"+
    "\7\102\2\u0212\2\102\1\u0212\12\102\10\0\6\111\1\0"+
    "\5\111\1\272\2\0\6\111\1\0\1\111\1\0\5\111"+
    "\11\0\2\111\1\u0213\34\111\12\0\1\u0214\6\0\4\u0214"+
    "\7\0\2\u0214\5\0\3\u0214\12\0\1\u0214\2\0\1\u0214"+
    "\4\0\1\u0214\7\0\2\u0214\2\0\1\u0214\11\0\2\u0146"+
    "\1\0\7\u0146\1\u0215\6\u0146\4\u0215\1\u01aa\1\u01ab\5\u0146"+
    "\2\u0215\5\u0146\3\u0215\12\u0146\1\u0215\2\u0146\1\u0215\4\u0146"+
    "\1\u0215\7\u0146\2\u0215\2\u0146\1\u0215\11\u0146\2\u0149\1\0"+
    "\7\u0149\1\u0216\6\u0149\4\u0216\1\u01ae\1\u0149\1\u01af\4\u0149"+
    "\2\u0216\5\u0149\3\u0216\12\u0149\1\u0216\2\u0149\1\u0216\4\u0149"+
    "\1\u0216\7\u0149\2\u0216\2\u0149\1\u0216\11\u0149\1\102\10\0"+
    "\6\111\1\0\5\111\1\272\2\0\3\111\1\344\2\111"+
    "\1\0\1\111\1\0\5\111\11\0\37\111\1\102\10\0"+
    "\6\111\1\0\5\111\1\272\2\0\6\111\1\0\1\111"+
    "\1\0\5\111\11\0\2\111\1\u0217\34\111\1\102\10\0"+
    "\6\111\1\0\5\111\1\272\2\0\6\111\1\0\1\111"+
    "\1\0\3\111\1\344\1\111\11\0\37\111\1\102\10\0"+
    "\6\111\1\0\5\111\1\272\2\0\6\111\1\0\1\111"+
    "\1\0\5\111\11\0\22\111\1\u0218\14\111\1\102\10\0"+
    "\6\111\1\0\5\111\1\272\2\0\6\111\1\0\1\111"+
    "\1\0\5\111\11\0\2\111\1\u0219\34\111\1\102\10\0"+
    "\6\111\1\0\5\111\1\272\2\0\6\111\1\0\1\111"+
    "\1\0\5\111\11\0\26\111\1\u021a\10\111\1\102\10\0"+
    "\6\111\1\0\5\111\1\272\2\0\6\111\1\0\1\111"+
    "\1\0\5\111\11\0\1\111\1\344\35\111\1\102\10\0"+
    "\6\111\1\0\5\111\1\272\2\0\1\111\1\u021b\4\111"+
    "\1\0\1\111\1\0\5\111\11\0\37\111\1\102\10\0"+
    "\6\111\1\0\5\111\1\272\2\0\3\111\1\u021c\2\111"+
    "\1\0\1\111\1\0\5\111\11\0\37\111\1\102\10\0"+
    "\6\111\1\0\5\111\1\272\2\0\6\111\1\0\1\111"+
    "\1\0\3\111\1\u021d\1\111\11\0\37\111\1\102\10\0"+
    "\6\111\1\0\5\111\1\272\2\0\3\111\1\u021e\2\111"+
    "\1\0\1\111\1\0\5\111\11\0\37\111\1\102\10\0"+
    "\6\111\1\0\5\111\1\272\2\0\6\111\1\0\1\111"+
    "\1\0\5\111\11\0\2\111\1\u021f\34\111\1\102\10\0"+
    "\6\111\1\0\5\111\1\272\2\0\6\111\1\0\1\111"+
    "\1\0\5\111\11\0\34\111\1\u0220\2\111\1\102\10\0"+
    "\6\111\1\0\5\111\1\272\2\0\6\111\1\0\1\111"+
    "\1\0\5\111\11\0\1\111\1\u0221\35\111\1\102\10\0"+
    "\3\111\1\u0222\2\111\1\0\5\111\1\272\2\0\6\111"+
    "\1\0\1\111\1\0\2\111\1\u0223\2\111\11\0\37\111"+
    "\1\102\10\0\6\111\1\0\5\111\1\272\2\0\6\111"+
    "\1\0\1\111\1\0\5\111\11\0\33\111\1\u0162\3\111"+
    "\1\102\10\0\6\111\1\0\5\111\1\272\2\0\6\111"+
    "\1\0\1\111\1\0\5\111\11\0\21\111\1\u01cd\15\111"+
    "\1\102\10\0\6\111\1\0\5\111\1\272\2\0\6\111"+
    "\1\0\1\111\1\0\5\111\11\0\25\111\1\u0151\11\111"+
    "\1\102\10\0\6\111\1\0\5\111\1\272\2\0\6\111"+
    "\1\0\1\111\1\0\5\111\11\0\22\111\1\u0224\14\111"+
    "\1\102\10\0\6\111\1\0\5\111\1\272\2\0\6\111"+
    "\1\0\1\111\1\0\5\111\11\0\33\111\1\u015c\3\111"+
    "\1\102\10\0\6\111\1\0\5\111\1\272\2\0\6\111"+
    "\1\0\1\111\1\0\5\111\11\0\26\111\1\u01c1\10\111"+
    "\11\0\6\153\1\0\5\153\3\0\2\153\1\u0225\3\153"+
    "\3\0\5\153\11\0\37\153\2\44\1\0\1\44\1\0"+
    "\2\44\2\0\6\44\1\0\6\44\2\0\1\u0103\40\44"+
    "\1\u0103\26\44\1\0\1\44\1\0\2\44\2\0\6\44"+
    "\1\0\6\44\2\0\11\44\1\67\52\44\1\67\3\44"+
    "\1\0\1\44\1\0\2\44\2\0\6\44\1\0\6\44"+
    "\2\0\15\44\1\u0226\32\44\1\u0226\17\44\1\0\1\44"+
    "\1\0\2\44\2\0\6\44\1\0\6\44\2\0\15\44"+
    "\1\u012c\32\44\1\u012c\17\44\1\0\1\44\1\0\2\44"+
    "\2\0\6\44\1\0\6\44\2\0\1\u0227\40\44\1\u0227"+
    "\26\44\1\0\1\44\1\0\2\44\2\0\6\44\1\0"+
    "\6\44\2\0\15\44\1\u01d6\32\44\1\u01d6\17\44\1\0"+
    "\1\44\1\0\2\44\2\0\6\44\1\0\6\44\2\0"+
    "\34\44\1\170\16\44\1\170\14\44\1\0\1\44\1\0"+
    "\2\44\2\0\6\44\1\0\6\44\2\0\34\44\1\u013b"+
    "\16\44\1\u013b\14\44\1\0\1\44\1\0\2\44\2\0"+
    "\6\44\1\0\6\44\2\0\37\44\1\u0228\23\44\1\u0228"+
    "\4\44\1\0\1\44\1\0\2\44\2\0\3\44\1\257"+
    "\2\44\1\0\6\44\2\0\31\44\1\257\34\44\15\0"+
    "\1\u0229\44\0\1\u0229\33\0\1\102\10\0\1\102\1\111"+
    "\4\102\1\0\1\102\4\111\1\102\2\0\4\102\2\111"+
    "\1\0\1\102\1\0\2\102\3\111\11\0\1\102\1\111"+
    "\2\102\1\111\4\102\1\111\7\102\2\111\2\102\1\111"+
    "\12\102\10\0\6\111\1\0\5\111\1\272\2\0\2\111"+
    "\1\u021a\3\111\1\0\1\111\1\0\5\111\11\0\37\111"+
    "\12\0\1\u022a\6\0\4\u022a\7\0\2\u022a\5\0\3\u022a"+
    "\12\0\1\u022a\2\0\1\u022a\4\0\1\u022a\7\0\2\u022a"+
    "\2\0\1\u022a\11\0\2\u0146\1\0\7\u0146\1\116\6\u0146"+
    "\4\116\1\u01aa\1\u01ab\5\u0146\2\116\5\u0146\3\116\12\u0146"+
    "\1\116\2\u0146\1\116\4\u0146\1\116\7\u0146\2\116\2\u0146"+
    "\1\116\11\u0146\2\u0149\1\0\7\u0149\1\117\6\u0149\4\117"+
    "\1\u01ae\1\u0149\1\u01af\4\u0149\2\117\5\u0149\3\117\12\u0149"+
    "\1\117\2\u0149\1\117\4\u0149\1\117\7\u0149\2\117\2\u0149"+
    "\1\117\11\u0149\1\102\10\0\6\111\1\0\5\111\1\272"+
    "\2\0\6\111\1\0\1\111\1\0\5\111\11\0\21\111"+
    "\1\u022b\15\111\1\102\10\0\6\111\1\0\5\111\1\272"+
    "\2\0\3\111\1\u01ba\2\111\1\0\1\111\1\0\5\111"+
    "\11\0\37\111\1\102\10\0\6\111\1\0\5\111\1\272"+
    "\2\0\6\111\1\0\1\111\1\0\5\111\11\0\24\111"+
    "\1\u01f0\12\111\1\102\10\0\6\111\1\0\5\111\1\272"+
    "\2\0\6\111\1\0\1\111\1\0\5\111\11\0\31\111"+
    "\1\344\5\111\1\102\10\0\6\111\1\0\5\111\1\272"+
    "\2\0\6\111\1\0\1\111\1\0\5\111\11\0\24\111"+
    "\1\u022c\12\111\1\102\10\0\6\111\1\0\5\111\1\272"+
    "\2\0\1\u0162\5\111\1\0\1\111\1\0\5\111\11\0"+
    "\37\111\1\102\10\0\6\111\1\0\5\111\1\272\2\0"+
    "\6\111\1\0\1\111\1\0\5\111\11\0\22\111\1\u022d"+
    "\14\111\1\102\10\0\6\111\1\0\5\111\1\272\2\0"+
    "\6\111\1\0\1\111\1\0\5\111\11\0\1\111\1\u0152"+
    "\35\111\1\102\10\0\6\111\1\0\5\111\1\272\2\0"+
    "\2\111\1\u0201\3\111\1\0\1\111\1\0\5\111\11\0"+
    "\37\111\1\102\10\0\6\111\1\0\5\111\1\272\2\0"+
    "\6\111\1\0\1\111\1\0\5\111\11\0\21\111\1\u022e"+
    "\15\111\1\102\10\0\6\111\1\0\5\111\1\272\2\0"+
    "\2\111\1\u022f\3\111\1\0\1\111\1\0\5\111\11\0"+
    "\37\111\1\102\10\0\6\111\1\0\5\111\1\272\2\0"+
    "\3\111\1\u0230\2\111\1\0\1\111\1\0\5\111\11\0"+
    "\37\111\1\102\10\0\6\111\1\0\5\111\1\272\2\0"+
    "\6\111\1\0\1\111\1\0\5\111\11\0\26\111\1\u0231"+
    "\10\111\1\102\10\0\6\111\1\0\5\111\1\272\2\0"+
    "\6\111\1\0\1\111\1\0\5\111\11\0\1\111\1\u01c1"+
    "\35\111\2\44\1\0\1\44\1\0\2\44\2\0\6\44"+
    "\1\0\6\44\2\0\11\44\1\u011b\52\44\1\u011b\3\44"+
    "\1\0\1\44\1\0\2\44\2\0\6\44\1\0\6\44"+
    "\2\0\34\44\1\172\16\44\1\172\14\44\1\0\1\44"+
    "\1\0\2\44\2\0\4\44\1\u0232\1\44\1\0\6\44"+
    "\2\0\32\44\1\u0232\33\44\16\0\1\u0233\13\0\1\u0233"+
    "\75\0\1\305\6\0\4\305\7\0\2\305\5\0\3\305"+
    "\12\0\1\305\2\0\1\305\4\0\1\305\7\0\2\305"+
    "\2\0\1\305\11\0\1\102\10\0\6\111\1\0\5\111"+
    "\1\272\2\0\3\111\1\u01c1\2\111\1\0\1\111\1\0"+
    "\5\111\11\0\37\111\1\102\10\0\6\111\1\0\5\111"+
    "\1\272\2\0\3\111\1\u0234\2\111\1\0\1\111\1\0"+
    "\5\111\11\0\37\111\1\102\10\0\6\111\1\0\5\111"+
    "\1\272\2\0\6\111\1\0\1\111\1\0\5\111\11\0"+
    "\1\111\1\u0162\35\111\1\102\10\0\6\111\1\0\5\111"+
    "\1\272\2\0\3\111\1\u0235\2\111\1\0\1\111\1\0"+
    "\5\111\11\0\37\111\1\102\10\0\6\111\1\0\5\111"+
    "\1\272\2\0\6\111\1\0\1\111\1\0\5\111\11\0"+
    "\21\111\1\u017d\15\111\1\102\10\0\6\111\1\0\5\111"+
    "\1\272\2\0\2\111\1\u01cd\3\111\1\0\1\111\1\0"+
    "\5\111\11\0\37\111\1\102\10\0\6\111\1\0\5\111"+
    "\1\272\2\0\6\111\1\0\1\111\1\0\5\111\11\0"+
    "\24\111\1\u0236\12\111\2\44\1\0\1\44\1\0\2\44"+
    "\2\0\6\44\1\0\6\44\2\0\12\44\1\u0237\42\44"+
    "\1\u0237\10\44\17\0\1\u0238\76\0\1\102\10\0\6\111"+
    "\1\0\5\111\1\272\2\0\6\111\1\0\1\111\1\0"+
    "\5\111\11\0\2\111\1\u0239\34\111\1\102\10\0\6\111"+
    "\1\0\5\111\1\272\2\0\2\111\1\u0151\3\111\1\0"+
    "\1\111\1\0\5\111\11\0\37\111\1\102\10\0\6\111"+
    "\1\0\5\111\1\272\2\0\6\111\1\0\1\111\1\0"+
    "\5\111\11\0\22\111\1\u0230\14\111\2\44\1\0\1\44"+
    "\1\0\2\44\2\0\6\44\1\0\6\44\2\0\33\44"+
    "\1\172\15\44\1\172\14\44\1\102\10\0\6\111\1\0"+
    "\5\111\1\272\2\0\6\111\1\0\1\111\1\0\5\111"+
    "\11\0\36\111\1\u022f";

  private static int [] zzUnpackTrans() {
    int [] result = new int[40404];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\2\1\1\0\2\1\2\0\2\1\1\11\4\1"+
    "\1\11\2\1\1\11\2\1\2\11\2\1\1\11\1\1"+
    "\3\11\1\1\1\11\25\1\1\11\2\1\4\11\1\1"+
    "\1\11\2\1\1\11\16\1\1\11\3\1\1\11\16\1"+
    "\1\11\4\1\1\11\1\1\1\11\1\0\1\11\103\1"+
    "\1\11\2\0\17\1\1\11\1\1\1\11\56\1\1\11"+
    "\1\1\1\0\1\1\1\11\100\1\2\0\3\1\1\0"+
    "\2\1\1\0\72\1\1\11\44\1\1\0\1\11\2\1"+
    "\1\0\1\1\1\11\3\1\1\11\72\1\1\0\2\1"+
    "\1\0\43\1\1\0\2\1\1\0\24\1\2\0\10\1"+
    "\1\0\4\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[569];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */

	/**
	 * Type specific to XMLTokenMaker denoting a line ending with an unclosed
	 * double-quote attribute.
	 */
	public static final int INTERNAL_ATTR_DOUBLE			= -1;


	/**
	 * Type specific to XMLTokenMaker denoting a line ending with an unclosed
	 * single-quote attribute.
	 */
	public static final int INTERNAL_ATTR_SINGLE			= -2;


	/**
	 * Token type specific to HTMLTokenMaker; this signals that the user has
	 * ended a line with an unclosed HTML tag; thus a new line is beginning
	 * still inside of the tag.
	 */
	public static final int INTERNAL_INTAG					= -3;

	/**
	 * Token type specific to HTMLTokenMaker; this signals that the user has
	 * ended a line with an unclosed <code>&lt;script&gt;</code> tag.
	 */
	public static final int INTERNAL_INTAG_SCRIPT			= -4;

	/**
	 * Token type specifying we're in a double-qouted attribute in a
	 * script tag.
	 */
	public static final int INTERNAL_ATTR_DOUBLE_QUOTE_SCRIPT = -5;

	/**
	 * Token type specifying we're in a single-qouted attribute in a
	 * script tag.
	 */
	public static final int INTERNAL_ATTR_SINGLE_QUOTE_SCRIPT = -6;

	/**
	 * Token type specifying we're in JavaScript.
	 */
	public static final int INTERNAL_IN_JS					= -7;

	/**
	 * Token type specifying we're in a JavaScript multiline comment.
	 */
	public static final int INTERNAL_IN_JS_MLC				= -8;

	/**
	 * Whether closing markup tags are automatically completed for HTML.
	 */
	private static boolean completeCloseTags;


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public HTMLTokenMaker() {
		super();
	}


	/**
	 * Adds the token specified to the current linked list of tokens as an
	 * "end token;" that is, at <code>zzMarkedPos</code>.
	 *
	 * @param tokenType The token's type.
	 */
	private void addEndToken(int tokenType) {
		addToken(zzMarkedPos,zzMarkedPos, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *                    occurs.
	 */
	public void addToken(char[] array, int start, int end, int tokenType, int startOffset) {
		super.addToken(array, start,end, tokenType, startOffset);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * Sets whether markup close tags should be completed.  You might not want
	 * this to be the case, since some tags in standard HTML aren't usually
	 * closed.
	 *
	 * @return Whether closing markup tags are completed.
	 * @see #setCompleteCloseTags(boolean)
	 */
	public boolean getCompleteCloseTags() {
		return completeCloseTags;
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
			case Token.COMMENT_MULTILINE:
				state = COMMENT;
				start = text.offset;
				break;
			case Token.PREPROCESSOR:
				state = PI;
				start = text.offset;
				break;
			case Token.VARIABLE:
				state = DTD;
				start = text.offset;
				break;
			case INTERNAL_INTAG:
				state = INTAG;
				start = text.offset;
				break;
			case INTERNAL_INTAG_SCRIPT:
				state = INTAG_SCRIPT;
				start = text.offset;
				break;
			case INTERNAL_ATTR_DOUBLE:
				state = INATTR_DOUBLE;
				start = text.offset;
				break;
			case INTERNAL_ATTR_SINGLE:
				state = INATTR_SINGLE;
				start = text.offset;
				break;
			case INTERNAL_ATTR_DOUBLE_QUOTE_SCRIPT:
				state = INATTR_DOUBLE_SCRIPT;
				start = text.offset;
				break;
			case INTERNAL_ATTR_SINGLE_QUOTE_SCRIPT:
				state = INATTR_SINGLE_SCRIPT;
				start = text.offset;
				break;
			case INTERNAL_IN_JS:
				state = JAVASCRIPT;
				start = text.offset;
				break;
			case INTERNAL_IN_JS_MLC:
				state = JS_MLC;
				start = text.offset;
				break;
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new DefaultToken();
		}

	}


	/**
	 * Sets whether markup close tags should be completed.  You might not want
	 * this to be the case, since some tags in standard HTML aren't usually
	 * closed.
	 *
	 * @param complete Whether closing markup tags are completed.
	 * @see #getCompleteCloseTags()
	 */
	public static void setCompleteCloseTags(boolean complete) {
		completeCloseTags = complete;
	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(java.io.Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public HTMLTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public HTMLTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 194) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 2: 
          { addToken(Token.IDENTIFIER);
          }
        case 56: break;
        case 52: 
          { addToken(Token.LITERAL_BOOLEAN);
          }
        case 57: break;
        case 28: 
          { addToken(Token.ERROR_CHAR);
          }
        case 58: break;
        case 39: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 59: break;
        case 22: 
          { start = zzMarkedPos-1; yybegin(INATTR_SINGLE_SCRIPT);
          }
        case 60: break;
        case 32: 
          { int count = yylength();
									addToken(zzStartRead,zzStartRead, Token.MARKUP_TAG_DELIMITER);
									zzMarkedPos -= (count-1); //yypushback(count-1);
									yybegin(INTAG_CHECK_TAG_NAME);
          }
        case 61: break;
        case 14: 
          { yybegin(YYINITIAL); addToken(Token.MARKUP_TAG_DELIMITER);
          }
        case 62: break;
        case 9: 
          { addToken(start,zzStartRead-1, Token.VARIABLE); return firstToken;
          }
        case 63: break;
        case 44: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 64: break;
        case 31: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addEndToken(INTERNAL_IN_JS_MLC); return firstToken;
          }
        case 65: break;
        case 53: 
          { addToken(Token.FUNCTION);
          }
        case 66: break;
        case 37: 
          { addToken(Token.COMMENT_EOL); addEndToken(INTERNAL_IN_JS); return firstToken;
          }
        case 67: break;
        case 26: 
          { addEndToken(INTERNAL_IN_JS); return firstToken;
          }
        case 68: break;
        case 33: 
          { start = zzMarkedPos-2; yybegin(DTD);
          }
        case 69: break;
        case 55: 
          { yybegin(YYINITIAL);
								  addToken(zzStartRead,zzStartRead+1, Token.MARKUP_TAG_DELIMITER);
								  addToken(zzMarkedPos-7,zzMarkedPos-2, Token.MARKUP_TAG_NAME);
								  addToken(zzMarkedPos-1,zzMarkedPos-1, Token.MARKUP_TAG_DELIMITER);
          }
        case 70: break;
        case 24: 
          { yybegin(INTAG_SCRIPT); addToken(start,zzStartRead, Token.MARKUP_TAG_ATTRIBUTE_VALUE);
          }
        case 71: break;
        case 42: 
          { addToken(Token.ERROR_CHAR); addEndToken(INTERNAL_IN_JS); return firstToken;
          }
        case 72: break;
        case 18: 
          { /* Shouldn't happen */ yypushback(1); yybegin(INTAG);
          }
        case 73: break;
        case 25: 
          { addToken(Token.ERROR_IDENTIFIER);
          }
        case 74: break;
        case 38: 
          { start = zzMarkedPos-2; yybegin(JS_MLC);
          }
        case 75: break;
        case 4: 
          { addToken(Token.MARKUP_TAG_DELIMITER); yybegin(INTAG);
          }
        case 76: break;
        case 10: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead, Token.VARIABLE);
          }
        case 77: break;
        case 46: 
          { yybegin(JAVASCRIPT); addToken(start,zzStartRead+1, Token.COMMENT_MULTILINE);
          }
        case 78: break;
        case 35: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+1, Token.PREPROCESSOR);
          }
        case 79: break;
        case 20: 
          { yybegin(INTAG); addToken(start,zzStartRead, Token.MARKUP_TAG_ATTRIBUTE_VALUE);
          }
        case 80: break;
        case 43: 
          { addToken(Token.LITERAL_CHAR);
          }
        case 81: break;
        case 34: 
          { start = zzMarkedPos-2; yybegin(PI);
          }
        case 82: break;
        case 16: 
          { start = zzMarkedPos-1; yybegin(INATTR_DOUBLE);
          }
        case 83: break;
        case 41: 
          { addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
          }
        case 84: break;
        case 17: 
          { /* A non-recognized HTML tag name */ yypushback(yylength()); yybegin(INTAG);
          }
        case 85: break;
        case 23: 
          { start = zzMarkedPos-1; yybegin(INATTR_DOUBLE_SCRIPT);
          }
        case 86: break;
        case 5: 
          { addToken(Token.WHITESPACE);
          }
        case 87: break;
        case 6: 
          { addToken(Token.DATA_TYPE);
          }
        case 88: break;
        case 19: 
          { addToken(Token.MARKUP_TAG_NAME);
          }
        case 89: break;
        case 27: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 90: break;
        case 15: 
          { start = zzMarkedPos-1; yybegin(INATTR_SINGLE);
          }
        case 91: break;
        case 11: 
          { addToken(Token.MARKUP_TAG_ATTRIBUTE);
          }
        case 92: break;
        case 49: 
          { start = zzMarkedPos-4; yybegin(COMMENT);
          }
        case 93: break;
        case 45: 
          { addToken(Token.RESERVED_WORD);
          }
        case 94: break;
        case 54: 
          { addToken(zzStartRead,zzStartRead, Token.MARKUP_TAG_DELIMITER);
							  addToken(zzMarkedPos-6,zzMarkedPos-1, Token.MARKUP_TAG_NAME);
							  start = zzMarkedPos; yybegin(INTAG_SCRIPT);
          }
        case 95: break;
        case 48: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+2, Token.COMMENT_MULTILINE);
          }
        case 96: break;
        case 47: 
          { int count = yylength();
									addToken(zzStartRead,zzStartRead+1, Token.MARKUP_TAG_DELIMITER);
									zzMarkedPos -= (count-2); //yypushback(count-2);
									yybegin(INTAG_CHECK_TAG_NAME);
          }
        case 97: break;
        case 30: 
          { addToken(Token.SEPARATOR);
          }
        case 98: break;
        case 29: 
          { addToken(Token.ERROR_STRING_DOUBLE); addEndToken(INTERNAL_IN_JS); return firstToken;
          }
        case 99: break;
        case 3: 
          { addNullToken(); return firstToken;
          }
        case 100: break;
        case 21: 
          { yybegin(JAVASCRIPT); addToken(Token.MARKUP_TAG_DELIMITER);
          }
        case 101: break;
        case 36: 
          { addToken(Token.MARKUP_TAG_DELIMITER); yybegin(YYINITIAL);
          }
        case 102: break;
        case 7: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 103: break;
        case 12: 
          { addToken(Token.OPERATOR);
          }
        case 104: break;
        case 40: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 105: break;
        case 13: 
          { addToken(Token.MARKUP_TAG_DELIMITER);
          }
        case 106: break;
        case 50: 
          { addToken(Token.COMMENT_MULTILINE);
          }
        case 107: break;
        case 8: 
          { addToken(start,zzStartRead-1, Token.PREPROCESSOR); return firstToken;
          }
        case 108: break;
        case 51: 
          { addToken(Token.ERROR_STRING_DOUBLE);
          }
        case 109: break;
        case 1: 
          { 
          }
        case 110: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case INTAG_CHECK_TAG_NAME: {
              addToken(zzMarkedPos,zzMarkedPos, INTERNAL_INTAG); return firstToken;
            }
            case 570: break;
            case JS_MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addEndToken(INTERNAL_IN_JS_MLC); return firstToken;
            }
            case 571: break;
            case INTAG_SCRIPT: {
              addToken(zzMarkedPos,zzMarkedPos, INTERNAL_INTAG_SCRIPT); return firstToken;
            }
            case 572: break;
            case INATTR_DOUBLE_SCRIPT: {
              addToken(start,zzStartRead-1, Token.MARKUP_TAG_ATTRIBUTE_VALUE); addEndToken(INTERNAL_ATTR_DOUBLE_QUOTE_SCRIPT); return firstToken;
            }
            case 573: break;
            case INATTR_SINGLE_SCRIPT: {
              addToken(start,zzStartRead-1, Token.MARKUP_TAG_ATTRIBUTE_VALUE); addEndToken(INTERNAL_ATTR_SINGLE_QUOTE_SCRIPT); return firstToken;
            }
            case 574: break;
            case DTD: {
              addToken(start,zzStartRead-1, Token.VARIABLE); return firstToken;
            }
            case 575: break;
            case INATTR_SINGLE: {
              addToken(start,zzStartRead-1, Token.MARKUP_TAG_ATTRIBUTE_VALUE); addEndToken(INTERNAL_ATTR_SINGLE); return firstToken;
            }
            case 576: break;
            case INATTR_DOUBLE: {
              addToken(start,zzStartRead-1, Token.MARKUP_TAG_ATTRIBUTE_VALUE); addEndToken(INTERNAL_ATTR_DOUBLE); return firstToken;
            }
            case 577: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 578: break;
            case INTAG: {
              addToken(zzMarkedPos,zzMarkedPos, INTERNAL_INTAG); return firstToken;
            }
            case 579: break;
            case COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 580: break;
            case JAVASCRIPT: {
              addEndToken(INTERNAL_IN_JS); return firstToken;
            }
            case 581: break;
            case PI: {
              addToken(start,zzStartRead-1, Token.PREPROCESSOR); return firstToken;
            }
            case 582: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
